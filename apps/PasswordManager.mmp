{
    "name": "PasswordManager",
    "author": "MartinMerkli",
    "description": "PasswordManager is a secure, public domain and open source manager for your passwords.",
    "public_keys": [
        1362243165304578894309201688767474283592266294026201544306900624262889890297511073254423696592454595048158834568215857560047324283189865371862334921152712452681,
        19465811633847345478716576471895580814724272792494896346734421115848937708468699935931458625530076436502570376864163733619192181123310237749886429086697051702724285437064022062047152276984176474287454286578111699623710852095119509127631132653874903045699522759404760012113920317344837274219410668005938844060017427702043
    ],
    "files": {
        "icon_high.gif": "R0lGODlhQAFAAecAAAAAAAEBAQICAgMDAwQEBAUFBQYGBgcHBwgICAkJCQoKCgsLCwwMDA0NDQ4ODg8PDxAQEBERERISEhMTExQUFBUVFRYWFhcXFxgYGBkZGRoaGhsbGxwcHB0dHR4eHh8fHyAgICEhISIiIiMjIyQkJCUlJSYmJigoKCkpKSoqKisrKywsLC0tLS4uLi8vLzAwMDExMTIyMjMzMzQ0NDU1NTY2Njc3Nzg4ODk5OTo6Ojs7Ozw8PD09PT4-Pj8_P0BAQEFBQUJCQkNDQ0REREVFRUZGRkdHR0hISElJSUpKSktLS0xMTE1NTU5OTk9PT1BQUFFRUVJSUlNTU1RUVFVVVVZWVldXV1hYWFlZWVpaWltbW1xcXF1dXV5eXl9fX2BgYGFhYWJiYmNjY2RkZGVlZWZmZmdnZ2hoaGlpaWpqamtra2xsbG1tbW5ubm9vb3BwcHFxcXJycnNzc3R0dHV1dXZ2dnd3d3h4eHl5eXp6ent7e3x8fH19fX5-fn9_f4CAgIGBgYKCgoODg4SEhIWFhYaGhoeHh4iIiImJiYqKiouLi4yMjI2NjY6Ojo-Pj5CQkJGRkZKSkpOTk5SUlJWVlZaWlpeXl5iYmJmZmZqampubm5ycnJ2dnZ6enp-fn6CgoKGhoaKioqOjo6SkpKWlpaampqenp6ioqKmpqaqqqqurq6ysrK2tra6urq-vr7CwsLGxsbKysrOzs7S0tLW1tba2tre3t7i4uLm5ubq6uru7u7y8vL29vb6-vr-_v8DAwMHBwcLCwsPDw8TExMXFxcbGxsjIyMnJycrKysvLy8zMzM3Nzc7Ozs_Pz9PT09XV1dfX19jY2Nra2tzc3ODg4OHh4eTk5OXl5ejo6Onp6evr6_Dw8PHx8fT09Pf39_n5-fz8_P___wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH-EUNyZWF0ZWQgd2l0aCBHSU1QACH5BAEKAP8ALAAAAABAAUABAAj-AP8JHEiwoMGDCBMqXMiwocOHECNKnEixosWLGDNq3Mixo8ePIEOKHEmypMmTKFOqXMmypcuXMGPKnEmzps2bOHPq3Mmzp8-fQIMKHUq0qNGjSJMqXcq0qdOnUKNKnUq1qtWrWLNq3cq1q9evYMOKHUu2rNmzaNOqXcu2rdu3cOPKnUu3rt27ePPq3cu3r9-_gAMLHky4sOHDiBMrXsy4sePHkCNLnky5suXLmDNr3sy5c2BinPak-WLFSZLTqE8vWc26teslqVMzmU179uvVsVHXro2kt-_et4PDzp1kN23iSYTf_v1b-Wvkxmcjd-6auW8iS6RY4dLm0KZeZHf-3QEyYUEAAAACDBiAvn17AfDjy58vwL37APjz46cP3357_QAGGAB_BNbnX3oCHghAgfwJOCCD8ynooIIQzjchAAQQ8B4EG-yAB3hcKeMHDAUAYAB6AgwgwHkKIuhggC0eeGGM7hH4YoI05nhjgDbuqF-OOvqYH4EErJehgemVGAAKfiSD1SxlWGDfAAUYoCGQWEqII5YzZsnlll6GKSZ6XY6ZJXwnYqhhAAk8YUxVU0DQ3gIawsciAFQeYGaQMGZZ5p7-_QnooPYJSuiCKq54oJ3nHfDFMVH98UCS7LlXAJLtraepphXKt-mmDhL4qaZCDtkpfKOu52CqiZ4a6qn-Kaa6aqqwrgjmf0eit1566HXQh1PKBIFhAgIcoKeJCFyZnop3Hurss9BGK-20ZBZ6pbIDGBABhuhNsctSmUgAgAIYMnBeAMqml-EAO3pZKn5alsqqu-8aquC8ftZ7K434ksninXaih8ABAZSYgSZJvbGAAGtS6_DDEEcs8cN4HLXFBegZAO_EHHfs8ccdH8BFUWdcaSymIKes8sosY5lAGkPhITAC5w7Y8s045_zxtgKcEZQnC3KLIq86F2300Yc2moAjQDVgYtALNov01FRX3aKeEDiAjE8nyEkAyilaLfbYUzMwZw092bEAAA8IcCK6A6ZL9tx0r-zAAWnSwRP-AhgWXPffgLd85doUQJqTFMw-HfjijE9cJNFN5DRLemsT3fjlmD9bX4kAHPsKTkVoaHbmpJcO6LElagwAEzfVAsDC7PFt-uy0Yyk7AAUk0IpNXqBH7uu1By-8e2vafB4YNoWQwNOKDu887bcfGUAINclyntN-S_389ovbLLuystDUO_fkc4_8TDeUr77w5-VAk5zrx296fQ_M9Ir8-JdeXywyMZL__5cjVyRkggYAGjBwJ4KDTJ5wwAbWLQBVkAkRKuXACk6NPQpAgkxqkCaOXelETvOXe9hzIkVx7mgnSpbQFPS1-ixPZ1QCAPzacyINUEENfpgEJPpghh44oAD-lUJAf9SDngPUR27RCgANZKICjxWsSJy70saGxjkBVA5paSKAA1BWIxYd61gsqxJ6HMC2t1GACaQIhxrXyMZLPKEA4upce76WHi5KCwYyYYHHKjWAAxDABocQxCAGQYhBBOIPfchDHvxghz3Y4RAzmJqtakCIOvghEJjMJCYJUQhBXDIFllMZi1Y0ADLiSQrQYKMqVemLG2Soc8tT0YIUgMRotUAmLtijewyghVX6co1iqNoB0vDLXz6BZi2rlAH4tq0YxKKYxSzFpPy2oAJcioLUcoFMWgAyAryQB9BcJQyQxjf2OCGcquQmzhKgoUsBIAvoLGYxeFDNtx0RYi_-kAkM7AgxNpWIBPFcYwiodiIaBFSNGZBjyxhWH0cd9JfeiIGJQtgoiGkzJnrsGDZleFBqmNJoGmIPBQ7Kjdux7IsDCMJDiykNExQRXRLLZ0xW8LFRoucZAcVFB4t2QgN0I6D3I8AJWUYuFjhjpcU8BQYAEMJQTguPMVHnofgoQl1hU0MECEAoArqJoRLvP-95HJ742SK34e5OU2QXftQKgGfGExHUXJQAZHciMErLjwCwRTy1cY14ruE8AwubwwQQg20-q0g2E9orFTdHACQioIyoZXuA2Nj-RG1M7CEhtq7EnnMBwBIBldlG_XNE9kiWUEccQjg50QQWTMACNjD-gyuguQ0PQC1iMoVJEwlVp2qlKbFDa-wZAiqHFlFWXV10qpfSxU7ggvE8cgjo-IyLHjpqT3Odk0UxkeEDohlIAkvARjHdYCXcOexcuX1JDMhKKDHiTk_NYs8RAgqG6_7HQAT4LXtjlFUA8K0-liUtmaoQ0CJg6VjsfFgLinkLCNzpAOwqohGQUUwKjNVhRRrADDboVTMZKEUMo5IdAbyiFwQ0CS3ibGfvY18anadEyMSQYIXGOQMAIaAvaHHn0sRWatXnDsUsAbteWJ8BMKBSPSjmELilY0CxawBoi4lEDwUfY9EQPQVoAFariyfcbSCgoKSR6vimrCa3yAATwPL-ZQ2gpCyypwAsCCgHmpxfACTgRL-TVsFe8csr-FdPymJYACAMAEX8UhIB0NhOp7XEmMxgv2JaQBVS8YMPYEqW9yTAAXgRzwiQFQGddYEfOHHkakW6RAPwQimWkDvfIYCy54mwBQJKLrLqqQAvWEQhmjqtDBx1ld-gpZ7SXMf_sPnLvkSGSR-2YSk7Cz58U8Af1IiMNnwAdyfqYG9BEU_zHuhKN5jEGiPAOTMrCG8GeIQap0EFECDIbarbFQF8gU5c6CpGMviEGqlhHoeB4JeVMC_2oBZhEw1Ar6usBgkHi55mw2Sch1qe2SCwyj-U4EAIOBEb0JkKJVn1PBoiQin-VKmF2y4bSwLAwCrhMAIDLS8AaysRIdDpvxdeiXMO0AErVEmELnvXWT745RjASNZsLeKXHJiYDGTyAmitqAi_bIQOdFXecc03nDJLQAGE2J4EyKAXvvzEZE2NJS0CwAq_HAQO-Fa5YgWAmOHUA5ZpaSAKKGHkqxxEAf6VKUIFwAi_9MJp7yuAQ_zSpQFO4nkKGxOID2p5x4IENFkhLPQswGlxDicXBpDxzh2gAEFYBTSXmmgzLW-rxaSEEezMTjLGAJ04aACh0dOAKRCjmNxQwN6D22ExDQAJv8TCvct6HkH8kqZTjJadGA8TqQIqPwVQQDxHMWX_NoDe0MwlHQH-EATsQ5MKBlo0kOrzgenLQGAAqAA6O4AesyGgDPHswexhOngsGYAJv7TC8LUEgGn70vnTkiIBsHQxcX7Och74F1CCwAEaYgBpBE1OwzdJsAsBpQlBJCYlQgYHBQhSUh-1AE20MFfpcQUHlQjBxR6QliMCsAT5N0Itch6A8EvcBFPTMiADKBMzMFpisjwlMgorZQYnEl3FZAl2xgO4sFJSEjS9RyOi91BksDxHV0x7MIJ89lCxVH9iAny-pH99RyEBMAi_dALBpWf1wXwvkVGDkiYqh1ThsANhAE1dcAOawIZO4IJeYmJIFQtHMAXQBAU8gHortQPnIX6Dck6-RAX-92ZfNjNzvjQCENMfFwUTL5CCOUIzVMCGaqQL0FSFbIgIyhQmBLAFmBgO2gBNqDCKdDApK-YshrhKUYAnhDhH9VEIhycAuzctsrQCuOQsJeIJo_iL6DRoOiZLPsdOsACMyOhL0WBWu3dyNLI2IXUsTfBLVaArQ2RqRDQAgfBLIFAfBrBTGmJXgxKJL5FLh2IAAJWM6shGPWdEKlhsBrWO8pgDQdMwZ6IrSRgCNvAGv1QHMcACKKACLtACLsACLAADL9ACL4ACMvAD-uZLUBACk7IgqjMu0EKOLmGOg6InvSSP6wgJC0JWzRJ9AIAGHrmOU0hCS0gjG4AeLpAJJ1n-TMyACBwAYBqzkmOCkS2hkYBSIjsXk8lYAStEWjZjIAOgXUAJjM4wKfe0XLfmBUkJTcCQBMtjABb2QoeikyzBk4CSAlGJjFPgbRTiO-iBA18JjPQEeebmHnpyY2dZTA8AP7FoJlq5ElxpJgvABW85ioOgQimWMa8DlXvJhmswADMkJhBAgYO5SqRARLxGKHWpEndpJhuQBGMQCLmwmNCEDKrAB1xAAmp2ZotlAkOQBYUQDZoJTcSwBl9AUyGJhe6xNq2YmgIVms4SmSkxmWYSN6-zAUGgBXwACsIwmLBgCFYgA4f5mPZRQhXVfulxAB2QBF9ACKawmLQwCFUQA2n-tjkakmdeAgF1QJuqdAUEUE7PgpsooZsHCHIWUANO4AaH0AryOAqPoAY3MAFAtJZjIkQMgAEzcARwwAiciIzU0AmUQAYxIJS3xVsCcAniyUZh4HT1QYAwYYDUkmidVULoIQEU0APUsFJSEAMo8AEjYFsNIDXAdVddV0QOYAF8uFJnoAE6UAMSYCwW9nlYRjBiuSdfg3cPGg4R-iw2Q6EvQQM6eCgFsH3nkkIAYAGzgFSs8FGvNAAZcic4-XzZEjYBIDsqwA1IVQgaUF398VEx9Cwqcow_CqRJBAAO9xIWiotFNEZJCgCzuVK_IAN6UkqkVWdwWmQCMJGXiInWwAL-a6MATYWiUyUAmpimQRotbeoSjudj1XRZgvmLR7ArDHApa3WkBxhzAmBKcYCMOpAm3lldr0ZlAeBWP9qo0PKoLVF90sI3x9IAsrONyfiKhMgw59U5GnIBxpeMQMBYdaSfQIIf1cmo00KkLgGrytc5SOIAfSCPVVAp8MapzsI3JSIADQCG66gE-CU1xZI0mJCmaiotZgipDyM7QokAhnCS5Ll9sWKtg-JNeCIJJ7l6d6M6AkiDgxIAMIms5qpP54gnRBY2ZpduBxUFnXBQS2AiqkMw4rgnMHcsC_BfB0CLASUE3BZQ6dMAMLYgV-R3oJWmYmCLlFisjfZwB4giaYL-JBHwWAFlCwZABA_VXWyDHhM5KANAZMpCRo5wUK1gAIEaULk0AORCVwc4rmk6BnAjpFEGE8y6J8cyVzDVKBgbUF8AAAygmAHVApOSAHoyl2KyWO40hwcVlg3wUNrQdAXAM3qClYNSCeRaBvkhpCn7Ek3nLOthIEa0AAPArQdFARoCBSt1AYmyoB6GZQUTtpSwUp4GAF3wUNYwUP6ltT5HKD-bpmZQM6iFHlDVfIeyJkVmAMsjAP53UG_ALQtwew-1LeQirygHbVpnAJGwUlyAHglAcQ_VDJmqnITCCOR6Bpyrs-eRXi6BhoBSa7hbHwgQqivVkl8zAPD0ULRAbFf-6iUVCwAZYGgrVTl9lAcrRQvkch45SygP-aNm0FnEOpYA8LkvAYA8eiKcMwF2gFSD8DV6ggASkA0rZQkPUKpmIjsi1a4rhQcrglUZgFSOkKknqyNNiL72OCgGYrwtkWNTZXlsA7gP5W4KJQBqgFSjgKOHwjcPILdINQEsAo0j-1CR1Vt-NwzkagYeRyiVgp4n4QLreyBExh4TsHErRQmMVSQRgFSEwHXzijsCEAFXe1B2QMJcNgJIpQfLA7d7siKlmKapG1LPcktR9SwEUykQMAOFKzu_Ux8mybB4ArvFOjDpIYoPlXTmNWZ68FCIuAAS53cAAA7kugZBk8OB4pL-uOTH34a7uoIAJoxOeVAtngUADjCc6NQLGBMBAxCye4KC8EMCD4hOW4AnDYAm7XEBATUKImBnC3KYg0Ku4XAG0MIiNmwS8Dsm9QEvRdZlYBBPCaCgU8vIAKCX4XQI61E5gjwlNFQpQBZOtXBku-JFeMLL0MQGW4ceE6AhxCbBepymwistLMBEZvpcb9O-YFdMwicAo0NBVoIAA7pKfuY3ufssWVbIJQID4WRgV4IymdoM0LQDE0lH4cpbBcAMwQubYdLKJRGpEkwmQISCa-MAUbhKtkAAa2M2BuI3fCMEv2QLjignCCDAhGIu_iE7E2C2jIkhsSO_XwQAL7pKo6D-AVnFN37DpxJsAJKXpoInpOmhrC1hpM3ax1aEHnWqRkKAJ3oighhingfgo2uUkpOiJNebJVUHHyWSAJUjBr60A12WWNnSHgcAAbOlSnVwa-SSJjrqjGPCvT_KQMo1JuchAE_7EgSduKEpO3xnACKApmpUCnLEMO3EK8orA6pkYFiZX8kHKNfCOdaEKmYjA6i5RkAsLkSkUI9TH1q4RnXoNkBUa3USsXtSzD_604j7fHfrEhbsMXOsRiGwhA9SuQ7QCGqUCk3XPCwz2uHAgHF0IPlbH2j6Ca75jWcdugIAyj8KC2T0up07ABS8lcE8JiWiADGwC5AgtqTMIgvWB-L-IlRDmTICMF-FEDRJqMPoAQEmFghhy9GdbaYFQIIP6gOoozkCTRJ52zFpYgKUfCCVkgD4QQJrcwAf1TLkQgLkYltllaf1QdXth4IPUycFsLGpyQZOk2Aru94jEUnunR4TuS0KUsYyFkU0dNx6Oylp0jYxAlNLxQAR8EHC7TASUB9rQGGDiQyIQ0KreMSuyhI_4DG66l-DZ5RV9DvHlTPsYTaDd0VavCxpItY07B4OAAI8IAZKvuRLbgZocAZnkAZpgAZtsAZroAZkMAZjEAZkIAZjUAZlQAZmoAZugAZswAZkwAWjqrpchqQA4AMyUYce09SkfC9YhilmhSH5vTL-lZLcLaIiGQ08f6bI5_VqZLbUgX0fVRXRGcPSVPxsdCoT0zUxL2Q2DmCtO3VEYMQARN4xbFK5i4VxQsNQ96EAnT4ovxNSTmMjzaMo51IkpGsAH4YksTJKCbA8a2MAMae3XkBAGj4mua4mNKLjtJ5FOGM2sdZiS8orWUW6XTgtLK1pFilX_xJrQxM21EpBUqSjC_c7vz5HPhMTkbCnFlTuLQNfTBMTqFBm327u7g4o9XEKMrEMFkCMitLA757vhJIADuAkMoEDucJk-j7wELN3OEATbACYVU3wDD8teqI3M4EKKvkeDV_x0eIKNWGAx5KiFt_xZrLWMpEGPp7G-O7-8SaPIm1gE8cgRJXS7idfQWnCOUdrODXROy378jj_bctDAOTiKDjxCy80cDk_9OpBSkMdDDlxuwfw6EN_8mCNZVGwExuQWS7f9P-DJAtAATwRCEXG9Fbf8W8GAAPEE1CwLWr89e-erQbgADvgE8wQAraI9jjPNxoAFKuQdLIjO3gl9_me1wuwCkEhCSdCLAAgAcjO9w4kaHc-7aIwFI5gXi9UvohvQC9kSnJiAJJQFJPAN7SKwZNvQDwTR3IiAYpwFKYgJTzv3J9fPgzwRcu0CUlxDDag8Kv_P1xnle27NUsxPphd--VTIpkKAOfTFJ-AvL4fPwKwPCigClLxBx_-ILY2KGNEWVX3ER_xAiAsluj-0if-kSjVvjEPcqRlUrcysi8oEjDVj1bR_x5dsjHNo_1ZoqTVVSkaMgJ1YBV8cHEmgmpClVXqkaQAEQDAQIIFBRAgMICAAIEFHRIMEFFiRIQDGhYMcLBAAQMTJz4EmVHAyIsgIXqMaMBAgYUmM1pEWdIkgIwEaDKESNMhw5gXSe6s2HLmzoEDFCI4UHIBhkDL_j2FGlXqVKpVrV7FmhUrKCcRIAow2lBoQQMLI4b8OXRmAIUJLaodyjKhTJptC8BVy3aAALwu02KMCPbu2YFsTe4d-LMsz5B76RY9YAAnAIVlAURQ4knrZs6dPX_-furpTgsPCYpuLCtQJGGHe0eOLByz78CEOAO7lB2YbsazPQ87Dsx3tm8Ar0cOKOxwdV0DJsf2Bmn7InGyECrUUDMK9Hbu3bcXS3VpUSA9eOrMkTNH_Zw7duzg0cOHzx49evLUNy9H__799f3_tw-P9uqgQ444DpSDjjvgA7A-_h6kw477AsRjwjzsKPDB_hrU447zDEyPjjrqsGPB--jjUMP96mDQQj3oE7DC9NBL7z0OO6xDDjji0C-O9myUj748hswDDzp4VLEOPfoQ5JFPZBnGOymnpLJKK6_EMkstt-SySy-_BDNMMccks0wzz0QzTTXXZLNNN9-EM04556T-s04778QzTz335LNPP_8ENFBBByW0UEMPRTRRRRdltFFHH4U0UkknpdQztSrFNNMtLxVztpk0BTVOTsP0dNRQTz3T1C9LhQtVV8lU1UtW8Xq1VlmHGnNWWm3lFctYu9R1116HlfJXLoNtlVhluTN2U2SbXTbaqqDNstm-pMVWK2p9xfUqYafdFqtwqRq3zm6rdcjbh6Yql8ptk41K187kVZdVqc4l1yRx9a33W6vw_ZRdU9ud8t2Bn83qWQDyRRYqfAUGqd91wbVX4nSfevif2TDOGNiOIeaXY4X_HfnekkWemOKIVU45XoRZvljVUjX-2NmA972ZZoUXZrhhk1_-Rrnln1fuWWidgR56XXiP3plnUmt2OeemnY4aaaaDrdrooLXemiCQT8664qt3zhVqhwGe-musw6a3a6-L5vrhqQeCe-axye7U7LsLYptkuT8OeW-666Z6b5i1_jvxjF9eWvCLn8758Md15uzgwP2mWu-jk5787I7RBlzma9l1vHDPNbeS2m9NT1jqy_dle_DNZHeb9tNfNzz2tyXfvXa-Le6cc65txt3337sDfXhti5_3dX8F1912wm1vXO3ghb_-2Lmzbz7wyC1lvnLn_U2eaMzNN_h7648Hc3v2mXVd_eXlnz1ypYUuX3njo2cd-955l57H3Nc__42udNwroPn-Wne5-3XOfvTjXwRxpkAAElBLA7Rg2m7nKeAZ8HzsW1nLFKe_DYIQgiX8XwXLtr0Otu2AoVsb7_o2NhRS74Q1zNwNobfA8KFLgxWcVQKf90IYEi1lRnxgD3EYvflRcHoB1B7ePihFHHqwikM81xG1SEHU5e99AGyiE6MYwwn-UIjGslrtuhY2360Pim7MoRJ3WEYSXolgU4yb2Vz4xM_xC30N5KIO5zhIPL5RgpCTYxiV166NiQ-Ln8IfIK-nOcuJsYCKRKAPE8lD_d2xituJFa4imS71pc97OjSlJS-IOk5m0pNLBGUpG8m_SeqtknVMZR1Tx0o6fjGByBPkE_n-GDwOwtGCbWRiK135SvgFs5cppGW8wBeyY8JxmF-cpTFbaMNEQqt6AtzkM6F5wNPVL2C-5OM1A5hNIQLxkpjM3hDHqMruJRFezBsVPmtmxSsasnHPY-U_-QlOejqShcazGxHl-UIg-nNuwjTnQRFZUIP-8KEILaY6G6pMMsIyomZcFS_FKcosNo2W7DxjIdF5RnmK1H0rDCdHz1lSsCnUlt4cV02TWU9aMTOWzoQnEm9GRYx-05gZZGQQtwmaRvqUqSINqgntmVB1UhSh26xmVbMK1at-0lFW_WhMySkortoRrNlCa1rVula2ttWtb4VrXOU6V7rW1a53xWte9br-V7721a9_BWxgBTtYwhbWsIdFbGIVu1jGNtaxj4VsZCU7WcpW1rKXxWxmNbtZznbWs58FbWjnNFCZZlK0lUJpaVd6WkylFqurZS2lMhpV08Y2UrNVLWxte1vcqlSXu20UVV-rW-B-tbdazWpxGSU23_5WuYliLnKTa9SCOTeawLQuT2v7VOKySakN5d4ewdjP3Ip1aeE67jvViKfvSle6nRwqaW0K1qbqsb3WROadxFvUWuoUlsLt50L56zVr-QyiTs0bJMWorz4SNcDHBSlL0-vgNlIXTpfCnYIzbNL3_irCD4YwhyUs1lSRNJATazCFB3jUEL-UxShN42i7xUD-P8oyvB528QyHueOTSq96oTSwnTgVv8c1uKJGs-KPDfnL67KYyensMeuSu6Z8_nGLTpyyR8mrzXt9ZoSLFF0Pv3xWGcc3hNQEqkqP6ttiEZme573pKct6YS_yTM5kVvOToYxdKyvxlrWt8zj79Ge6uXm7peWyCr0T6CU7bqdL9eqgCD1mQY9Ygfa9IdAoyWikIbhNYSYfBEEa5wWLeNOGNuOcRUXpE1vyoloer6WrLMdJmzrNdAKykjf86vzmGcQGPPWdc6xqOn-Pn4vLca9jPV9hBbvPw751mXdt41aPOtOoPpmzRYhBpxH7TThO8SiLeOlroxmNNKVorbM8UkP-gbt4rHboVE2LblXO2s-MrpK33XTud8sbtqAmIb2XaeZ7Y7vRR-4ue8e9UniPtHCkvjJ8Cf5mda_b15Lep6v9XWlHPzrWmBY2mDkNSvVinH76pHH4BFpwoda74v0LNVD_p-9P0xzeMF95QQUez5ynvOdWdWC05eRpQv58443eedBjLtEtu7HkZLX50a0G8SKvWNYAZTohA0V0ZGed6lLl9a8faW0SSxvPyx4wgRvObrEvzN3X4jdRae7dqE97VwCft9TPfPLRFVjuQl814D3-4EgrG6JRLvyaE__irp_d7NlF-0kPaXj8pnTx66u8w1HueLVy3kye57N1if7cdgtcnvTDGv3pXWVh1Z-KuKxvfahKDfvYayrsta_Vh3G_egrvnvcx9v3v9xt8W92X-NGi_fGVv3zmN9_5z4d-9KU_fepX3_rXx372tb997nff-98Hf_jFP37yl3_6AQEAOw==",
        "icon.gif": "R0lGODlhQABAAMYAAAAAAAEBAQICAgMDAwQEBAUFBQYGBgcHBwgICAkJCQsLCwwMDA0NDQ8PDxERERMTExYWFhcXFxoaGhwcHB4eHh8fHyAgICEhISMjIyQkJCUlJScnJykpKS0tLS8vLzExMTMzMzU1NTc3Nzk5OTo6Ojs7Ozw8PD8_P0BAQEFBQUZGRkhISElJSUtLS0xMTE5OTlFRUVJSUlhYWFlZWVpaWl5eXmJiYmVlZWZmZmhoaGlpaWpqamxsbHBwcHFxcXNzc3Z2dnd3d3t7e3x8fH19fX5-fn9_f4ODg4aGhoiIiIqKio6OjpCQkJOTk5SUlJWVlZqampubm5ycnJ6enp-fn6GhoaKioqWlpaampqenp6ioqKmpqaqqqqurq6ysrK2tra6urrW1tbi4uLu7u7y8vL29vb6-vsDAwMLCwsTExNfX19jY2N7e3uDg4OPj4-fn5_Pz8_X19fn5-f39_f___wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH-EUNyZWF0ZWQgd2l0aCBHSU1QACH5BAEKAH8ALAAAAABAAEAAAAf-gH-Cg4SFhoeIiYqLjI2Oj5CRkpOUlZaXmJNwmZydnp-goaKjpKWmp6ipqqusra6vsLGynkkqGBUWFxcWFbq7uRe4urzDwMHGwsTDFRkuS49DAwHT0wAA1NbV2NfaAdbc393h3tMGSow43t_r7O3u7_DuQYpUAurx-Pn61gOKGvf7Agr8JqBEooEIEwY46C6APQEC8tlzCLCdwxhHcBSo1o5hOwFP6NCRsyBeAB8i6bSAF2ACmZR0TkTsiIgdtQBIUmbjyG0ajJQcrs1k50VkF5FrKlrzmI1IhwA0RM6xFmPHOgE_SgiooBOAiR7uRKYIEEEkCndMAZwQCeaDSDP-M8rQebOugUgxKuTQYaMizEgFABWI_CbXhsW0UGCKjAMTxDcgiiPXuCeAgsgKvdbQscFzac11aSIrFmJNgBbRMKUM3YGaDpMB7NIyCMEjZMo0VoB4KJDtgIccTBiLVFPlCAkE97i0blMx7TUJaBT3sNeuwBfFSyCyu466Dc1D7ARAOJPySkodQ68ZAJOSScojsNdtaf2m-edsAhKLzOIBpoN1ARCR0hgJ6CWSB-xgQZ994AHIQBUibSAAFSO9kF4AAzQhEgsCFCHSDbytcxpqbnxnyDs9GDENBlM8oNQ0MjhBAAAFVOFBZwAM0VoUDJ7ojgCwOaQdPNIAABF14YlOwAILLbSwApMobATgQUolZOWPiYxQ5ZVcXhODIlt2aSUBjBAQppj7AOnIA2hyaQEkXMwi55x01mnnnXjmqeeefPbp55-ABirooIQWKkogADs=",
        "EN.txt": "UGFzc3dvcmRNYW5hZ2VyCmxvY2sKcXVpdApuYW1lCnVybAphcHAKdXNlcm5hbWUKcGFzc3dvcmQKY29weQpzaG93CmhpZGUKZ2VuZXJhdGUKZWRpdApzZXR0aW5ncwphYm91dAphZGQgbmV3CkNvcHlyaWdodChjKSBNYXJ0aW4gUy4gTWVya2xpClRoaXMgcHJvZ3JhbSBpcyBmcmVlIChpbiB0ZXJtcyBvZiBmcmVlZG9tKSBhbmQgb3Blbi1zb3VyY2Ugc29mdHdhcmUgYW5kIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBHTlUgR1BMMy4gVmlzaXQgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPiBmb3IgbW9yZSBpbmZvcm1hdGlvbi4KV2VsY29tZQpQbGVhc2UgZW50ZXIgYSBwYXNzd29yZDoKVGhlIHBhc3N3b3JkIGlzIHNlY3VyZS4KVGhlIHBhc3N3b3JkIGlzIG5vdCBzZWN1cmUuClJlcGVhdCB0aGUgcGFzc3dvcmQ6ClBhc3N3b3JkIGlzIG5vdCB2YWxpZApjb250aW51ZQpQYXNzd29yZHMgZG9uJ3QgbWF0Y2gKZXhhbXBsZQpQbGVhc2UgZW50ZXIgeW91ciBwYXNzd29yZDoKd3JvbmcgcGFzc3dvcmQKWW91IGhhdmUgZW50ZXJlZCB0aGUgaW5jb3JyZWN0IHBhc3N3b3JkLgpCYWNrdXAKRG8gbm90IGZvcmdldCB0byBiYWNrdXAgeW91ciBkYXRhIChwYXNzd29yZHMuYmluIGFuZCBjb25maWcudHh0KS4KcGFzc3dvcmRzClN1Y2Nlc3MKVGhlIHBhc3N3b3JkIHdhcyBzdWNjZXNzZnVsbHkgY29waWVkIHRvIHRoZSBjbGlwYm9hcmQuCldhcm5pbmcKVGhlIGN1cnJlbnQgcGFzc3dvcmQgd2lsbCBiZSBkZWxldGVkLgpEbyB5b3Ugd2FudCB0byBjb250aW51ZT8KR2VuZXJhdGUgcGFzc3dvcmQKTGVuZ3RoIG9mIHRoZSBwYXNzd29yZDoKZm9yZ290IHBhc3N3b3JkCklmIHlvdSBmb3Jnb3QgeW91ciBwYXNzd29yZCBwbGVhc2UgY29udGFjdCB0aGUgc3VwcG9ydC4KYmFja3VwIG1lc3NhZ2UKY2hhbmdlIHBhc3N3b3JkCmludmFsaWQgaW5wdXQocykKUGxlYXNlIGVudGVyIHRoZSBvbGQgcGFzc3dvcmQ6CkVudGVyIGEgbmV3IHBhc3N3b3JkOgpSZXBlYXQgdGhlIG5ldyBwYXNzd29yZDoKY2FuY2VsCkVycm9yClNvbWV0aGluZyB3ZW50IHdyb25nLgpQbGVhc2UgY29udGFjdCB0aGUgc3VwcG9ydC4K",
        "main.py": "IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwojIFBhc3N3b3JkTWFuYWdlciwgQ29weXJpZ2h0KGMpIDIwMjEgTWFydGluIFMuIE1lcmtsaQojCiMgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKIyBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQojIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCiMgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KIwojIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAojIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiMgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQojIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCiMKIyBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQojIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi4KCgppbXBvcnQgaGFzaGxpYgpmcm9tIGFzdCBpbXBvcnQgbGl0ZXJhbF9ldmFsCmltcG9ydCBzeXMKaW1wb3J0IG9zCmltcG9ydCB0aW1lCmltcG9ydCByYW5kb20KaW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IGJhc2U2NAoKCmRlZiBpbnN0YWxsKHBhY2thZ2UpOgogICAgc3VicHJvY2Vzcy5jaGVja19jYWxsKFtzeXMuZXhlY3V0YWJsZSwgIi1tIiwgInBpcCIsICJpbnN0YWxsIiwgcGFja2FnZV0pCgoKdHJ5OgogICAgZnJvbSBDcnlwdG8uQ2lwaGVyIGltcG9ydCBBRVMKICAgIGZyb20gQ3J5cHRvIGltcG9ydCBSYW5kb20KZXhjZXB0IE1vZHVsZU5vdEZvdW5kRXJyb3I6CiAgICBpbnN0YWxsKCdweWNyeXB0b2RvbWUnKQogICAgZnJvbSBDcnlwdG8uQ2lwaGVyIGltcG9ydCBBRVMKICAgIGZyb20gQ3J5cHRvIGltcG9ydCBSYW5kb20KdHJ5OgogICAgaW1wb3J0IHRraW50ZXIgYXMgdGsKICAgIGZyb20gdGtpbnRlciBpbXBvcnQgbWVzc2FnZWJveApleGNlcHQgTW9kdWxlTm90Rm91bmRFcnJvcjoKICAgIGluc3RhbGwoJ3RrJykKICAgIGltcG9ydCB0a2ludGVyIGFzIHRrCiAgICBmcm9tIHRraW50ZXIgaW1wb3J0IG1lc3NhZ2Vib3gKCgpkZWYgcmVsYXRpdmVfZmlsZShyZWxhdGl2ZV9wYXRoOiBzdHIpOgogICAgc2NyaXB0X2RpciA9IG9zLmdldGN3ZCgpCiAgICBhYnNvbHV0ZV9wYXRoID0gb3MucGF0aC5qb2luKHNjcmlwdF9kaXIsIHJlbGF0aXZlX3BhdGgpCiAgICByZXR1cm4gYWJzb2x1dGVfcGF0aAoKCmNsYXNzIEFFU0NpcGhlcihvYmplY3QpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBrZXkpOgogICAgICAgIHNlbGYuYnMgPSBBRVMuYmxvY2tfc2l6ZQogICAgICAgIHNlbGYua2V5ID0gaGFzaGxpYi5zaGEyNTYoa2V5KS5kaWdlc3QoKQoKICAgIGRlZiBlbmNyeXB0KHNlbGYsIHJhdyk6CiAgICAgICAgcmF3ID0gc2VsZi5fcGFkKHJhdykKICAgICAgICBpdiA9IFJhbmRvbS5uZXcoKS5yZWFkKEFFUy5ibG9ja19zaXplKQogICAgICAgIGNpcGhlciA9IEFFUy5uZXcoc2VsZi5rZXksIEFFUy5NT0RFX0NCQywgaXYpCiAgICAgICAgcmV0dXJuIGJhc2U2NC5iNjRlbmNvZGUoaXYgKyBjaXBoZXIuZW5jcnlwdChyYXcuZW5jb2RlKCkpKQoKICAgIGRlZiBkZWNyeXB0KHNlbGYsIGVuYyk6CiAgICAgICAgZW5jID0gYmFzZTY0LmI2NGRlY29kZShlbmMpCiAgICAgICAgaXYgPSBlbmNbOkFFUy5ibG9ja19zaXplXQogICAgICAgIGNpcGhlciA9IEFFUy5uZXcoc2VsZi5rZXksIEFFUy5NT0RFX0NCQywgaXYpCiAgICAgICAgcmV0dXJuIHNlbGYuX3VucGFkKGNpcGhlci5kZWNyeXB0KGVuY1tBRVMuYmxvY2tfc2l6ZTpdKSkuZGVjb2RlKCd1dGYtOCcpCgogICAgZGVmIF9wYWQoc2VsZiwgcyk6CiAgICAgICAgcmV0dXJuIHMgKyAoc2VsZi5icyAtIGxlbihzKSAlIHNlbGYuYnMpICogY2hyKHNlbGYuYnMgLSBsZW4ocykgJSBzZWxmLmJzKQoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBfdW5wYWQocyk6CiAgICAgICAgcmV0dXJuIHNbOi1vcmQoc1tsZW4ocyktMTpdKV0KCgpkZWYgaGFzaF9wYXNzd29yZChwYXNzd29yZDogc3RyKSAtPiBieXRlczoKICAgIHRyeToKICAgICAgICB3aXRoIG9wZW4ocmVsYXRpdmVfZmlsZSgnc3JjL2FwcHMvUGFzc3dvcmRNYW5hZ2VyLycgKyAnY29uZmlnLnR4dCcpLCAncicpIGFzIGNvbmZpZ19maWxlOgogICAgICAgICAgICBzYWx0ID0gbGl0ZXJhbF9ldmFsKGNvbmZpZ19maWxlLnJlYWRsaW5lcygpWzFdKQogICAgICAgIGtleSA9IGhhc2hsaWIucGJrZGYyX2htYWMoJ3NoYTUxMicsIHBhc3N3b3JkLmVuY29kZSgpLCBzYWx0LCAxMTA2MzcpCiAgICAgICAgcmV0dXJuIGtleQogICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOgogICAgICAgIHJlY292ZXIoKQoKCmRlZiB4b3IoeDogYnl0ZXMsIHk6IGJ5dGVzKSAtPiBieXRlczoKICAgIHJldHVybiBieXRlcyhbX2EgXiBfYiBmb3IgX2EsIF9iIGluIHppcCh4LCB5KV0pCgoKZGVmIGVuY3J5cHQodGV4dDogc3RyLCBwYXNzd29yZDogc3RyKSAtPiBieXRlczoKICAgIG9iaiA9IEFFU0NpcGhlcihoYXNoX3Bhc3N3b3JkKHBhc3N3b3JkKSkKICAgIGNpcGhlciA9IG9iai5lbmNyeXB0KHRleHQpCiAgICByZXR1cm4gY2lwaGVyCgoKZGVmIGRlY3J5cHQoY2lwaGVyOiBieXRlcywgcGFzc3dvcmQ6IHN0cikgLT4gc3RyOgogICAgb2JqID0gQUVTQ2lwaGVyKGhhc2hfcGFzc3dvcmQocGFzc3dvcmQpKQogICAgdGV4dCA9IG9iai5kZWNyeXB0KGNpcGhlcikKICAgIHJldHVybiB0ZXh0CgoKZGVmIGNvcHkodGV4dDogc3RyLCB3aW5kb3c6IHRrLlRrKSAtPiBOb25lOgogICAgd2luZG93LmNsaXBib2FyZF9jbGVhcigpCiAgICB3aW5kb3cuY2xpcGJvYXJkX2FwcGVuZCh0ZXh0KQogICAgd2luZG93LnVwZGF0ZSgpCgoKZGVmIHJhaXNlX2Vycm9yKGVycm9yOiBzdHIsIGNvZGU6IGludCwgbW9kZXM6IGxpc3QpIC0-IE5vbmU6CiAgICBpZiAnbWVzc2FnZWJveCcgaW4gbW9kZXM6CiAgICAgICAgbWVzc2FnZWJveC5zaG93ZXJyb3IoJ0Vycm9yICcgKyBzdHIoY29kZSkgKyAnIC0gUGFzc3dvcmRNYW5hZ2VyJywgZXJyb3IgKyAnXG5Db2RlOiAnICsgc3RyKGNvZGUpKQogICAgaWYgJ3F1aXQnIGluIG1vZGVzOgogICAgICAgIHN5cy5leGl0KCkKCgpkZWYgdHJhbnNsYXRlX2luaXQoKSAtPiBOb25lOgogICAgZ2xvYmFsIF9sYW5ndWFnZQogICAgc3VwcG9ydGVkX2xhbmd1YWdlcyA9IFsnRU4nLCAnREUnXQogICAgZm9yIHN1cHBvcnRlZF9sYW5ndWFnZSBpbiBzdXBwb3J0ZWRfbGFuZ3VhZ2VzOgogICAgICAgIHRyeToKICAgICAgICAgICAgd2l0aCBvcGVuKHJlbGF0aXZlX2ZpbGUoJ3NyYy9hcHBzL1Bhc3N3b3JkTWFuYWdlci8nICsgc3VwcG9ydGVkX2xhbmd1YWdlICsgJy50eHQnKSwgJ3InKSBhcyBsYW5ndWFnZV9maWxlOgogICAgICAgICAgICAgICAgX2xhbmd1YWdlID0gW10KICAgICAgICAgICAgICAgIGZvciBsaW5lIGluIGxhbmd1YWdlX2ZpbGUucmVhZGxpbmVzKCk6CiAgICAgICAgICAgICAgICAgICAgX2xhbmd1YWdlLmFwcGVuZChsaW5lLnJlcGxhY2UoJ1xuJywgJycpKQogICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgIHJhaXNlX2Vycm9yKCdubyBsYW5ndWFnZSBpbnN0YWxsZWQnLCAxMDIsIFsnbWVzc2FnZWJveCcsICdxdWl0J10pCgoKZGVmIHRyYW5zbGF0ZShpbmRleDogaW50KSAtPiBzdHI6CiAgICBnbG9iYWwgX2xhbmd1YWdlCiAgICByZXR1cm4gX2xhbmd1YWdlW2luZGV4IC0gMV0KCgpkZWYgcmVjb3ZlcigpIC0-IE5vbmU6CiAgICBtZXNzYWdlYm94LnNob3d3YXJuaW5nKHRyYW5zbGF0ZSg1MCkgKyAnIC0gJyArIHRyYW5zbGF0ZSgxKSwgdHJhbnNsYXRlKDUxKSArICdcbicgKyB0cmFuc2xhdGUoNTIpKQoKCmRlZiBnZXRfbmFtZXMocGFzc3dvcmQ6IHN0cikgLT4gbGlzdDoKICAgIHRyeToKICAgICAgICB3aXRoIG9wZW4ocmVsYXRpdmVfZmlsZSgnc3JjL2FwcHMvUGFzc3dvcmRNYW5hZ2VyLycgKyAncGFzc3dvcmRzLmJpbicpLCAncmInKSBhcyBlbmNyeXB0ZWRfcGFzc3dvcmRfZmlsZToKICAgICAgICAgICAgaW5mb3JtYXRpb25zID0gbGl0ZXJhbF9ldmFsKGRlY3J5cHQoZW5jcnlwdGVkX3Bhc3N3b3JkX2ZpbGUucmVhZCgpLCBwYXNzd29yZCkpCiAgICAgICAgICAgIG5hbWVzID0gW10KICAgICAgICAgICAgZm9yIGluZm9ybWF0aW9uIGluIGluZm9ybWF0aW9uczoKICAgICAgICAgICAgICAgIG5hbWVzLmFwcGVuZChpbmZvcm1hdGlvblswXSkKICAgICAgICAgICAgcmV0dXJuIG5hbWVzCiAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3I6CiAgICAgICAgcmVjb3ZlcigpCgoKZGVmIGdldF9pbmZvcm1hdGlvbnMocGFzc3dvcmQ6IHN0cikgLT4gbGlzdDoKICAgIHRyeToKICAgICAgICB3aXRoIG9wZW4ocmVsYXRpdmVfZmlsZSgnc3JjL2FwcHMvUGFzc3dvcmRNYW5hZ2VyLycgKyAncGFzc3dvcmRzLmJpbicpLCAncmInKSBhcyBlbmNyeXB0ZWRfcGFzc3dvcmRfZmlsZToKICAgICAgICAgICAgaW5mb3JtYXRpb25zID0gbGl0ZXJhbF9ldmFsKGRlY3J5cHQoZW5jcnlwdGVkX3Bhc3N3b3JkX2ZpbGUucmVhZCgpLCBwYXNzd29yZCkpCiAgICAgICAgICAgIHJldHVybiBpbmZvcm1hdGlvbnMKICAgIGV4Y2VwdCBGaWxlTm90Rm91bmRFcnJvcjoKICAgICAgICByZWNvdmVyKCkKCgpkZWYgZ2V0X2luZm9ybWF0aW9uKG5hbWU6IHN0ciwgcGFzc3dvcmQ6IHN0cikgLT4gbGlzdDoKICAgIHRyeToKICAgICAgICB3aXRoIG9wZW4ocmVsYXRpdmVfZmlsZSgnc3JjL2FwcHMvUGFzc3dvcmRNYW5hZ2VyLycgKyAncGFzc3dvcmRzLmJpbicpLCAncmInKSBhcyBlbmNyeXB0ZWRfcGFzc3dvcmRfZmlsZToKICAgICAgICAgICAgaW5mb3JtYXRpb25zID0gbGl0ZXJhbF9ldmFsKGRlY3J5cHQoZW5jcnlwdGVkX3Bhc3N3b3JkX2ZpbGUucmVhZCgpLCBwYXNzd29yZCkpCiAgICAgICAgICAgIGZvciBpbmZvcm1hdGlvbiBpbiBpbmZvcm1hdGlvbnM6CiAgICAgICAgICAgICAgICBpZiBpbmZvcm1hdGlvblswXSA9PSBuYW1lOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmZvcm1hdGlvbgogICAgICAgICAgICByYWlzZV9lcnJvcignYW4gdW5rbm93biBlcnJvciBhY2NydWVkJywgMTAyLCBbJ21lc3NhZ2Vib3gnLCAncXVpdCddKQogICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOgogICAgICAgIHJlY292ZXIoKQoKCmRlZiBnZXRfZGVzY3JpcHRpb25zKHBhc3N3b3JkOiBzdHIpIC0-IGxpc3Q6CiAgICB0cnk6CiAgICAgICAgd2l0aCBvcGVuKHJlbGF0aXZlX2ZpbGUoJ3NyYy9hcHBzL1Bhc3N3b3JkTWFuYWdlci8nICsgJ3Bhc3N3b3Jkcy5iaW4nKSwgJ3JiJykgYXMgZW5jcnlwdGVkX3Bhc3N3b3JkX2ZpbGU6CiAgICAgICAgICAgIGluZm9ybWF0aW9ucyA9IGxpdGVyYWxfZXZhbChkZWNyeXB0KGVuY3J5cHRlZF9wYXNzd29yZF9maWxlLnJlYWQoKSwgcGFzc3dvcmQpKQogICAgICAgICAgICBkZXNjcmlwdGlvbnMgPSBbXQogICAgICAgICAgICBmb3IgaW5mb3JtYXRpb24gaW4gaW5mb3JtYXRpb25zOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb25zLmFwcGVuZChpbmZvcm1hdGlvblsxXSkKICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9ucwogICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOgogICAgICAgIHJlY292ZXIoKQoKCmRlZiBnZXRfc3RyaW5nX3RpbWUoKSAtPiBzdHI6CiAgICByZXR1cm4gdGltZS5hc2N0aW1lKCkuc3BsaXQoJyAnKVszXQoKCmRlZiBnZW5lcmF0ZV9wYXNzd29yZF9kaWFsb2coaW5mb3JtYXRpb25fbmFtZSkgLT4gTm9uZToKICAgIGdsb2JhbCBfcGFzc3dvcmQKICAgIHdpbmRvdyA9IHRrLlRrKCkKICAgIHdpbmRvdy50aXRsZSh0cmFuc2xhdGUoMzkpICsgJyAtICcgKyB0cmFuc2xhdGUoMSkpCiAgICBhID0gdGsuTGFiZWwod2luZG93LCB0ZXh0PXRyYW5zbGF0ZSg0MCkpCiAgICBiID0gdGsuRW50cnkod2luZG93LCB3aWR0aD0xNikKICAgIGNfcHJlc3NlZCA9IHRrLkJvb2xlYW5WYXIoKQogICAgY19wcmVzc2VkLnNldChGYWxzZSkKICAgIGMgPSB0ay5CdXR0b24od2luZG93LCB0ZXh0PXRyYW5zbGF0ZSgyNSksIGNvbW1hbmQ9bGFtYmRhOiBjX3ByZXNzZWQuc2V0KFRydWUpKQogICAgYS5ncmlkKHJvdz0wLCBjb2x1bW49MCkKICAgIGIuZ3JpZChyb3c9MSwgY29sdW1uPTApCiAgICBjLmdyaWQocm93PTIsIGNvbHVtbj0wKQogICAgYi5pbnNlcnQoMCwgJzE2JykKICAgIGxvb3AgPSBUcnVlCiAgICBsZW5ndGggPSAxNgogICAgd2hpbGUgbG9vcDoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpbmRvdy51cGRhdGUoKQogICAgICAgICAgICBpZiBiLmdldCgpLmlzZGlnaXQoKToKICAgICAgICAgICAgICAgIGMuY29uZmlnKHN0YXRlPXRrLk5PUk1BTCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGMuY29uZmlnKHN0YXRlPXRrLkRJU0FCTEVEKQogICAgICAgICAgICAgICAgY19wcmVzc2VkLnNldChGYWxzZSkKICAgICAgICAgICAgaWYgY19wcmVzc2VkLmdldCgpOgogICAgICAgICAgICAgICAgbGVuZ3RoID0gaW50KGIuZ2V0KCkpCiAgICAgICAgICAgICAgICB3aW5kb3cuZGVzdHJveSgpCiAgICAgICAgZXhjZXB0IHRrLlRjbEVycm9yOgogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgcGFzc3dvcmQgPSBnZW5lcmF0ZV9wYXNzd29yZChsZW5ndGgpCiAgICBpbmZvcm1hdGlvbnMgPSBnZXRfaW5mb3JtYXRpb25zKF9wYXNzd29yZCkKICAgIG5hbWVzID0gW10KICAgIGZvciBpbmZvcm1hdGlvbiBpbiBpbmZvcm1hdGlvbnM6CiAgICAgICAgbmFtZXMuYXBwZW5kKGluZm9ybWF0aW9uWzBdKQogICAgaW5mb3JtYXRpb25zW25hbWVzLmluZGV4KGluZm9ybWF0aW9uX25hbWUpXVszXSA9IHBhc3N3b3JkCiAgICBjaGFuZ2VfaW5mb3JtYXRpb24oaW5mb3JtYXRpb25zKQoKCmRlZiBnZW5lcmF0ZV9wYXNzd29yZChsZW5ndGg6IGludCA9IDE2KSAtPiBzdHI6CiAgICBjaGFyYWN0ZXJzID0gWydxJywgJ3cnLCAnZScsICdyJywgJ3QnLCAneicsICd1JywgJ2knLCAnbycsICdwJywgJ2EnLCAncycsICdkJywgJ2YnLCAnZycsICdoJywgJ2onLCAnaycsICdsJywgJ3knLAogICAgICAgICAgICAgICAgICAneCcsICdjJywgJ3YnLCAnYicsICduJywgJ20nLCAnUScsICdXJywgJ0UnLCAnUicsICdUJywgJ1onLCAnVScsICdJJywgJ08nLCAnUCcsICdBJywgJ1MnLCAnRCcsICdGJywKICAgICAgICAgICAgICAgICAgJ0cnLCAnSCcsICdKJywgJ0snLCAnTCcsICdZJywgJ1gnLCAnQycsICdWJywgJ0InLCAnTicsICdNJywgJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJzcnLCAnOCcsCiAgICAgICAgICAgICAgICAgICc5JywgJzAnLCAnLCcsICcuJywgJy0nLCAnOycsICc6JywgJ18nLCAnKycsICc9JywgJyknLCAnKCcsICclJywgJyYnLCAnLycsICdAJywgJ3snLCAnfScsICckJywgJ1snLAogICAgICAgICAgICAgICAgICAnXScsICc_JywgJyEnLCAnPCcsICc-J10KICAgIHBhc3N3b3JkID0gJycKICAgIGZvciBpIGluIHJhbmdlKGxlbmd0aCk6CiAgICAgICAgcGFzc3dvcmQgKz0gcmFuZG9tLmNob2ljZShjaGFyYWN0ZXJzKQogICAgcmV0dXJuIHBhc3N3b3JkCgoKZGVmIGlzX3NlY3VyZV9wYXNzd29yZChwYXNzd29yZDogc3RyKSAtPiBib29sOgogICAgc2NvcmUgPSAwCiAgICBpZiBsZW4ocGFzc3dvcmQpID49IDQ6CiAgICAgICAgc2NvcmUgKz0gMQogICAgaWYgbGVuKHBhc3N3b3JkKSA-PSA4OgogICAgICAgIHNjb3JlICs9IDEKICAgIGlmIGxlbihwYXNzd29yZCkgPj0gMTI6CiAgICAgICAgc2NvcmUgKz0gMQogICAgaWYgbGVuKHBhc3N3b3JkKSA-PSAxNjoKICAgICAgICBzY29yZSArPSAxCiAgICBpZiBsZW4ocGFzc3dvcmQpID49IDY0OgogICAgICAgIHNjb3JlICs9IDQKICAgIGZvciBpIGluIFsncScsICd3JywgJ2UnLCAncicsICd0JywgJ3onLCAndScsICdpJywgJ28nLCAncCcsICdhJywgJ3MnLCAnZCcsICdmJywgJ2cnLCAnaCcsICdqJywgJ2snLCAnbCcsICd5JywgJ3gnLAogICAgICAgICAgICAgICdjJywgJ3YnLCAnYicsICduJywgJ20nXToKICAgICAgICBpZiBpIGluIHBhc3N3b3JkOgogICAgICAgICAgICBzY29yZSArPSAxCiAgICAgICAgICAgIGJyZWFrCiAgICBmb3IgaSBpbiBbJ1EnLCAnVycsICdFJywgJ1InLCAnVCcsICdaJywgJ1UnLCAnSScsICdPJywgJ1AnLCAnQScsICdTJywgJ0QnLCAnRicsICdHJywgJ0gnLCAnSicsICdLJywgJ0wnLCAnWScsICdYJywKICAgICAgICAgICAgICAnQycsICdWJywgJ0InLCAnTicsICdNJ106CiAgICAgICAgaWYgaSBpbiBwYXNzd29yZDoKICAgICAgICAgICAgc2NvcmUgKz0gMQogICAgICAgICAgICBicmVhawogICAgZm9yIGkgaW4gWycxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICc3JywgJzgnLCAnOScsICcwJ106CiAgICAgICAgaWYgaSBpbiBwYXNzd29yZDoKICAgICAgICAgICAgc2NvcmUgKz0gMQogICAgICAgICAgICBicmVhawogICAgZm9yIGkgaW4gWycsJywgJy4nLCAnLScsICc7JywgJzonLCAnXycsICcrJywgJz0nLCAnKScsICcoJywgJyUnLCAnJicsICcvJywgJ0AnLCAneycsICd9JywgJyQnLCAnWycsICddJywgJz8nLCAnIScsCiAgICAgICAgICAgICAgJzwnLCAnPiddOgogICAgICAgIGlmIGkgaW4gcGFzc3dvcmQ6CiAgICAgICAgICAgIHNjb3JlICs9IDEKICAgICAgICAgICAgYnJlYWsKICAgIHBhc3N3b3JkMiA9IHBhc3N3b3JkCiAgICBmb3IgaSBpbiBbJ3EnLCAndycsICdlJywgJ3InLCAndCcsICd6JywgJ3UnLCAnaScsICdvJywgJ3AnLCAnYScsICdzJywgJ2QnLCAnZicsICdnJywgJ2gnLCAnaicsICdrJywgJ2wnLCAneScsICd4JywKICAgICAgICAgICAgICAnYycsICd2JywgJ2InLCAnbicsICdtJywgJ1EnLCAnVycsICdFJywgJ1InLCAnVCcsICdaJywgJ1UnLCAnSScsICdPJywgJ1AnLCAnQScsICdTJywgJ0QnLCAnRicsICdHJywgJ0gnLAogICAgICAgICAgICAgICdKJywgJ0snLCAnTCcsICdZJywgJ1gnLCAnQycsICdWJywgJ0InLCAnTicsICdNJywgJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJzcnLCAnOCcsICc5JywgJzAnLCAnLCcsCiAgICAgICAgICAgICAgJy4nLCAnLScsICc7JywgJzonLCAnXycsICcrJywgJz0nLCAnKScsICcoJywgJyUnLCAnJicsICcvJywgJ0AnLCAneycsICd9JywgJyQnLCAnWycsICddJywgJz8nLCAnIScsICc8JywKICAgICAgICAgICAgICAnPiddOgogICAgICAgIHBhc3N3b3JkMi5yZXBsYWNlKGksICcnKQogICAgaWYgbGVuKHBhc3N3b3JkMikgPiAwOgogICAgICAgIHNjb3JlICs9IDEKICAgIGlmIHNjb3JlID49IDY6CiAgICAgICAgcmV0dXJuIFRydWUKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuIEZhbHNlCgoKZGVmIHNldHVwKCkgLT4gc3RyOgogICAgd2l0aCBvcGVuKHJlbGF0aXZlX2ZpbGUoJ3NyYy9hcHBzL1Bhc3N3b3JkTWFuYWdlci8nICsgJ2NvbmZpZy50eHQnKSwgJ3cnKSBhcyBjb25maWdfZmlsZToKICAgICAgICBzZXR1cF93aW5kb3cgPSB0ay5UaygpCiAgICAgICAgc2V0dXBfd2luZG93LnRpdGxlKHRyYW5zbGF0ZSgxOSkgKyAnISAtICcgKyB0cmFuc2xhdGUoMSkpCiAgICAgICAgYSA9IHRrLkxhYmVsKHNldHVwX3dpbmRvdywgdGV4dD10cmFuc2xhdGUoMjApKQogICAgICAgIGIgPSB0ay5FbnRyeShzZXR1cF93aW5kb3csIHNob3c9JyonLCB3aWR0aD0zMikKICAgICAgICBjID0gdGsuTGFiZWwoc2V0dXBfd2luZG93LCB0ZXh0PScnKQogICAgICAgIGQgPSB0ay5MYWJlbChzZXR1cF93aW5kb3csIHRleHQ9dHJhbnNsYXRlKDIzKSkKICAgICAgICBlID0gdGsuRW50cnkoc2V0dXBfd2luZG93LCBzaG93PScqJywgd2lkdGg9MzIpCiAgICAgICAgZiA9IHRrLkxhYmVsKHNldHVwX3dpbmRvdywgdGV4dD0nJykKICAgICAgICBnID0gdGsuQnV0dG9uKHNldHVwX3dpbmRvdywgdGV4dD10cmFuc2xhdGUoMjUpLCB3aWR0aD0zMiwgY29tbWFuZD1sYW1iZGE6IGxvb3Auc2V0KEZhbHNlKSkKICAgICAgICBhLmdyaWQocm93PTAsIGNvbHVtbj0wKQogICAgICAgIGIuZ3JpZChyb3c9MSwgY29sdW1uPTApCiAgICAgICAgYy5ncmlkKHJvdz0yLCBjb2x1bW49MCkKICAgICAgICBkLmdyaWQocm93PTMsIGNvbHVtbj0wKQogICAgICAgIGUuZ3JpZChyb3c9NCwgY29sdW1uPTApCiAgICAgICAgZi5ncmlkKHJvdz01LCBjb2x1bW49MCkKICAgICAgICBnLmdyaWQocm93PTYsIGNvbHVtbj0wKQogICAgICAgIGxvb3AgPSB0ay5Cb29sZWFuVmFyKCkKICAgICAgICBsb29wLnNldChUcnVlKQogICAgICAgIHdoaWxlIGxvb3AuZ2V0KCk6CiAgICAgICAgICAgIGlmIGIuZ2V0KCkgPT0gJycgb3IgJyAnIGluIGIuZ2V0KCk6CiAgICAgICAgICAgICAgICBnLmNvbmZpZyhzdGF0ZT10ay5ESVNBQkxFRCkKICAgICAgICAgICAgICAgIGMuY29uZmlnKHRleHQ9dHJhbnNsYXRlKDI0KSkKICAgICAgICAgICAgICAgIGYuY29uZmlnKHRleHQ9JycpCiAgICAgICAgICAgIGVsaWYgbm90IGlzX3NlY3VyZV9wYXNzd29yZChiLmdldCgpKToKICAgICAgICAgICAgICAgIGcuY29uZmlnKHN0YXRlPXRrLkRJU0FCTEVEKQogICAgICAgICAgICAgICAgYy5jb25maWcodGV4dD10cmFuc2xhdGUoMjIpKQogICAgICAgICAgICAgICAgZi5jb25maWcodGV4dD0nJykKICAgICAgICAgICAgZWxpZiBiLmdldCgpICE9IGUuZ2V0KCk6CiAgICAgICAgICAgICAgICBnLmNvbmZpZyhzdGF0ZT10ay5ESVNBQkxFRCkKICAgICAgICAgICAgICAgIGMuY29uZmlnKHRleHQ9dHJhbnNsYXRlKDIxKSkKICAgICAgICAgICAgICAgIGYuY29uZmlnKHRleHQ9dHJhbnNsYXRlKDI2KSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGcuY29uZmlnKHN0YXRlPXRrLk5PUk1BTCkKICAgICAgICAgICAgICAgIGMuY29uZmlnKHRleHQ9dHJhbnNsYXRlKDIxKSkKICAgICAgICAgICAgICAgIGYuY29uZmlnKHRleHQ9JycpCiAgICAgICAgICAgIHNldHVwX3dpbmRvdy51cGRhdGUoKQogICAgICAgIHBhc3N3b3JkID0gYi5nZXQoKQogICAgICAgIGV4YW1wbGUgPSBbW3RyYW5zbGF0ZSgyNyksICdleGFtcGxlLmNvbScsICd1c2VyMTIzNCcsIGdlbmVyYXRlX3Bhc3N3b3JkKDE2KV1dCiAgICAgICAgc2FsdCA9IG9zLnVyYW5kb20oMzIpCiAgICAgICAgY29uZmlnX2ZpbGUud3JpdGUoc3RyKGhhc2hsaWIucGJrZGYyX2htYWMoJ3NoYTUxMicsIHBhc3N3b3JkLmVuY29kZSgpLCBzYWx0LCAxMjgwMDApKSArICdcbicpCiAgICAgICAgY29uZmlnX2ZpbGUud3JpdGUoc3RyKHNhbHQpICsgJ1xuJykKICAgICAgICBjb25maWdfZmlsZS53cml0ZShzdHIoaW50KHRpbWUudGltZSgpKSkgKyAnXG4nKQogICAgd2l0aCBvcGVuKHJlbGF0aXZlX2ZpbGUoJ3NyYy9hcHBzL1Bhc3N3b3JkTWFuYWdlci8nICsgJ3Bhc3N3b3Jkcy5iaW4nKSwgJ3diJykgYXMgcGFzc3dvcmRzX2ZpbGU6CiAgICAgICAgcGFzc3dvcmRzX2ZpbGUud3JpdGUoZW5jcnlwdChzdHIoZXhhbXBsZSksIHBhc3N3b3JkKSkKICAgIHJldHVybiBwYXNzd29yZAoKCmRlZiBiYWNrdXBfbWVzc2FnZSgpIC0-IE5vbmU6CiAgICB3aXRoIG9wZW4ocmVsYXRpdmVfZmlsZSgnc3JjL2FwcHMvUGFzc3dvcmRNYW5hZ2VyLycgKyAnY29uZmlnLnR4dCcpLCAncicpIGFzIGNvbmZpZ19maWxlOgogICAgICAgIGNvbmZpZyA9IGNvbmZpZ19maWxlLnJlYWRsaW5lcygpCiAgICAgICAgbGFzdF9iYWNrdXAgPSBpbnQoY29uZmlnWzJdKQogICAgICAgIGlmIGxhc3RfYmFja3VwID09IDA6CiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgZWxpZiBpbnQodGltZS50aW1lKCkpIC0gbGFzdF9iYWNrdXAgPj0gMTAwMDAwMDoKICAgICAgICAgICAgbWVzc2FnZWJveC5zaG93d2FybmluZyh0cmFuc2xhdGUoMzEpICsgJyAtICcgKyB0cmFuc2xhdGUoMSksIHRyYW5zbGF0ZSgzMikpCiAgICAgICAgICAgIGNvbmZpZ1syXSA9IHN0cihpbnQodGltZS50aW1lKCkpKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICB3aXRoIG9wZW4ocmVsYXRpdmVfZmlsZSgnc3JjL2FwcHMvUGFzc3dvcmRNYW5hZ2VyLycgKyAnY29uZmlnLnR4dCcpLCAndycpIGFzIGNvbmZpZ19maWxlOgogICAgICAgIGNvbmZpZ19maWxlLndyaXRlbGluZXMoY29uZmlnKQoKCmRlZiBjaGFuZ2VfaW5mb3JtYXRpb24obmV3X2luZm9ybWF0aW9uOiBsaXN0KSAtPiBOb25lOgogICAgZ2xvYmFsIF9wYXNzd29yZAogICAgd2l0aCBvcGVuKHJlbGF0aXZlX2ZpbGUoJ3NyYy9hcHBzL1Bhc3N3b3JkTWFuYWdlci8nICsgJ3Bhc3N3b3Jkcy5iaW4nKSwgJ3diJykgYXMgcGFzc3dvcmRfZmlsZToKICAgICAgICBjaXBoZXIgPSBlbmNyeXB0KHN0cihuZXdfaW5mb3JtYXRpb24pLCBfcGFzc3dvcmQpCiAgICAgICAgcGFzc3dvcmRfZmlsZS53cml0ZShjaXBoZXIpCgoKZGVmIGFkZF9pbmZvcm1hdGlvbl9kaWFsb2coKSAtPiBOb25lOgogICAgZ2xvYmFsIF9wYXNzd29yZAogICAgYWRkX3dpbmRvdyA9IHRrLlRrKCkKICAgIGFkZF93aW5kb3cudGl0bGUodHJhbnNsYXRlKDE2KSArICcgLSAnICsgdHJhbnNsYXRlKDEpKQogICAgYTEgPSB0ay5MYWJlbChhZGRfd2luZG93LCB0ZXh0PXRyYW5zbGF0ZSg0KSArICc6Jywgd2lkdGg9MTYpCiAgICBhMiA9IHRrLkVudHJ5KGFkZF93aW5kb3csIHdpZHRoPTMyKQogICAgYjEgPSB0ay5MYWJlbChhZGRfd2luZG93LCB0ZXh0PXRyYW5zbGF0ZSg1KSArICcvJyArIHRyYW5zbGF0ZSg2KSArICc6Jywgd2lkdGg9MTYpCiAgICBiMiA9IHRrLkVudHJ5KGFkZF93aW5kb3csIHdpZHRoPTMyKQogICAgYzEgPSB0ay5MYWJlbChhZGRfd2luZG93LCB0ZXh0PXRyYW5zbGF0ZSg3KSArICc6Jywgd2lkdGg9MTYpCiAgICBjMiA9IHRrLkVudHJ5KGFkZF93aW5kb3csIHdpZHRoPTMyKQogICAgZDEgPSB0ay5MYWJlbChhZGRfd2luZG93LCB0ZXh0PXRyYW5zbGF0ZSg4KSArICc6Jywgd2lkdGg9MTYpCiAgICBkMiA9IHRrLkVudHJ5KGFkZF93aW5kb3csIHdpZHRoPTMyKQogICAgZTJfcHJlc3NlZCA9IHRrLkJvb2xlYW5WYXIoKQogICAgZTJfcHJlc3NlZC5zZXQoRmFsc2UpCiAgICBlMiA9IHRrLkJ1dHRvbihhZGRfd2luZG93LCB0ZXh0PXRyYW5zbGF0ZSgxMiksIGNvbW1hbmQ9bGFtYmRhOiBlMl9wcmVzc2VkLnNldChUcnVlKSwgd2lkdGg9MzIpCiAgICBmID0gdGsuTGFiZWwoYWRkX3dpbmRvdywgdGV4dD0nJykKICAgIGdfcHJlc3NlZCA9IHRrLkJvb2xlYW5WYXIoKQogICAgZ19wcmVzc2VkLnNldChGYWxzZSkKICAgIGcgPSB0ay5CdXR0b24oYWRkX3dpbmRvdywgdGV4dD10cmFuc2xhdGUoMTYpLCBjb21tYW5kPWxhbWJkYTogZ19wcmVzc2VkLnNldChUcnVlKSwgd2lkdGg9NTApCiAgICBhMS5ncmlkKHJvdz0wLCBjb2x1bW49MCkKICAgIGEyLmdyaWQocm93PTAsIGNvbHVtbj0xKQogICAgYjEuZ3JpZChyb3c9MSwgY29sdW1uPTApCiAgICBiMi5ncmlkKHJvdz0xLCBjb2x1bW49MSkKICAgIGMxLmdyaWQocm93PTIsIGNvbHVtbj0wKQogICAgYzIuZ3JpZChyb3c9MiwgY29sdW1uPTEpCiAgICBkMS5ncmlkKHJvdz0zLCBjb2x1bW49MCkKICAgIGQyLmdyaWQocm93PTMsIGNvbHVtbj0xKQogICAgZTIuZ3JpZChyb3c9NCwgY29sdW1uPTEpCiAgICBmLmdyaWQocm93PTUsIGNvbHVtbj0wLCBjb2x1bW5zcGFuPTIpCiAgICBnLmdyaWQocm93PTYsIGNvbHVtbj0wLCBjb2x1bW5zcGFuPTIpCiAgICBsb29wID0gdGsuQm9vbGVhblZhcigpCiAgICBsb29wLnNldChUcnVlKQogICAgd2hpbGUgbG9vcC5nZXQoKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIGEyLmdldCgpID09ICcnIG9yIGIyLmdldCgpID09ICcnIG9yIGMyLmdldCgpID09ICcnIG9yIGQyLmdldCgpID09ICcnIG9yIGEyLmdldCgpIGluIGdldF9uYW1lcyhfcGFzc3dvcmQpOgogICAgICAgICAgICAgICAgZy5jb25maWcoc3RhdGU9dGsuRElTQUJMRUQpCiAgICAgICAgICAgICAgICBmLmNvbmZpZyh0ZXh0PXRyYW5zbGF0ZSg0NSkpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBnLmNvbmZpZyhzdGF0ZT10ay5OT1JNQUwpCiAgICAgICAgICAgICAgICBmLmNvbmZpZyh0ZXh0PScnKQogICAgICAgICAgICBpZiBlMl9wcmVzc2VkLmdldCgpOgogICAgICAgICAgICAgICAgZTJfcHJlc3NlZC5zZXQoRmFsc2UpCiAgICAgICAgICAgICAgICBnZW5lcmF0ZV93aW5kb3cgPSB0ay5UaygpCiAgICAgICAgICAgICAgICBnZW5lcmF0ZV93aW5kb3cudGl0bGUodHJhbnNsYXRlKDEyKSArICcgLSAnICsgdHJhbnNsYXRlKDEpKQogICAgICAgICAgICAgICAgeCA9IHRrLkxhYmVsKGdlbmVyYXRlX3dpbmRvdywgdGV4dD10cmFuc2xhdGUoNDApKQogICAgICAgICAgICAgICAgeSA9IHRrLkVudHJ5KGdlbmVyYXRlX3dpbmRvdywgd2lkdGg9MTYpCiAgICAgICAgICAgICAgICB6X3ByZXNzZWQgPSB0ay5Cb29sZWFuVmFyKCkKICAgICAgICAgICAgICAgIHpfcHJlc3NlZC5zZXQoRmFsc2UpCiAgICAgICAgICAgICAgICB6ID0gdGsuQnV0dG9uKGdlbmVyYXRlX3dpbmRvdywgdGV4dD10cmFuc2xhdGUoMjUpLCB3aWR0aD0xNiwgY29tbWFuZD1sYW1iZGE6IHpfcHJlc3NlZC5zZXQoVHJ1ZSkpCiAgICAgICAgICAgICAgICB4LmdyaWQocm93PTAsIGNvbHVtbj0wKQogICAgICAgICAgICAgICAgeS5ncmlkKHJvdz0xLCBjb2x1bW49MCkKICAgICAgICAgICAgICAgIHouZ3JpZChyb3c9MiwgY29sdW1uPTApCiAgICAgICAgICAgICAgICBsb29wMiA9IHRrLkJvb2xlYW5WYXIoKQogICAgICAgICAgICAgICAgbG9vcDIuc2V0KFRydWUpCiAgICAgICAgICAgICAgICB3aGlsZSBsb29wMi5nZXQoKToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludCh5LmdldCgpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgei5jb25maWcoc3RhdGU9dGsuTk9STUFMKQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgKFZhbHVlRXJyb3IsIFR5cGVFcnJvcik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6LmNvbmZpZyhzdGF0ZT10ay5ESVNBQkxFRCkKICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVfd2luZG93LnVwZGF0ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHpfcHJlc3NlZC5nZXQoKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5X2ludCA9IGludCh5LmdldCgpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQyLmRlbGV0ZSgwLCBsZW4oZDIuZ2V0KCkpICsgMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkMi5pbnNlcnQoMCwgZ2VuZXJhdGVfcGFzc3dvcmQoeV9pbnQpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3AyLnNldChGYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZV93aW5kb3cuZGVzdHJveSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgKFZhbHVlRXJyb3IsIFR5cGVFcnJvcik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCB0ay5UY2xFcnJvcjoKICAgICAgICAgICAgICAgICAgICAgICAgbG9vcDIuc2V0KEZhbHNlKQogICAgICAgICAgICBhZGRfd2luZG93LnVwZGF0ZSgpCiAgICAgICAgICAgIGlmIGdfcHJlc3NlZC5nZXQoKToKICAgICAgICAgICAgICAgIGxvb3Auc2V0KEZhbHNlKQogICAgICAgICAgICAgICAgZ19wcmVzc2VkLnNldChGYWxzZSkKICAgICAgICAgICAgICAgIG5ld19wYXNzd29yZCA9IFthMi5nZXQoKSwgYjIuZ2V0KCksIGMyLmdldCgpLCBkMi5nZXQoKV0KICAgICAgICAgICAgICAgIGFkZF9pbmZvcm1hdGlvbihuZXdfcGFzc3dvcmQpCiAgICAgICAgICAgICAgICBhZGRfd2luZG93LmRlc3Ryb3koKQogICAgICAgIGV4Y2VwdCB0ay5UY2xFcnJvcjoKICAgICAgICAgICAgbG9vcC5zZXQoRmFsc2UpCgoKZGVmIGFkZF9pbmZvcm1hdGlvbihpbmZvcm1hdGlvbjogbGlzdCkgLT4gTm9uZToKICAgIGdsb2JhbCBfcGFzc3dvcmQKICAgIG9sZCA9IGdldF9pbmZvcm1hdGlvbnMoX3Bhc3N3b3JkKQogICAgb2xkLmFwcGVuZChpbmZvcm1hdGlvbikKICAgIGNoYW5nZV9pbmZvcm1hdGlvbihvbGQpCgoKZGVmIHNldHRpbmdzX21lbnUoKSAtPiBOb25lOgogICAgZ2xvYmFsIF9wYXNzd29yZAogICAgc2V0dGluZ3Nfd2luZG93ID0gdGsuVGsoKQogICAgc2V0dGluZ3Nfd2luZG93LnRpdGxlKHRyYW5zbGF0ZSgxNCkgKyAnIC0gJyArIHRyYW5zbGF0ZSgxKSkKICAgIHdpdGggb3BlbihyZWxhdGl2ZV9maWxlKCdzcmMvYXBwcy9QYXNzd29yZE1hbmFnZXIvJyArICdjb25maWcudHh0JyksICdyJykgYXMgY29uZmlnX2ZpbGU6CiAgICAgICAgY29uZmlnID0gY29uZmlnX2ZpbGUucmVhZGxpbmVzKCkKICAgIGFfc2VsZWN0ZWQgPSB0ay5Cb29sZWFuVmFyKCkKICAgIGFfc2VsZWN0ZWRfb2xkID0gdGsuQm9vbGVhblZhcigpCiAgICBhID0gdGsuQ2hlY2tidXR0b24oc2V0dGluZ3Nfd2luZG93LCB0ZXh0PXRyYW5zbGF0ZSg0MyksIHZhcmlhYmxlPWFfc2VsZWN0ZWQsIG9udmFsdWU9VHJ1ZSwgb2ZmdmFsdWU9RmFsc2UpCiAgICBiID0gdGsuQnV0dG9uKHNldHRpbmdzX3dpbmRvdywgdGV4dD10cmFuc2xhdGUoNDQpLCBjb21tYW5kPWNoYW5nZV9wYXNzd29yZCwgd2lkdGg9MzIpCiAgICBhLmdyaWQocm93PTAsIGNvbHVtbj0wKQogICAgYi5ncmlkKHJvdz0xLCBjb2x1bW49MCkKICAgIGlmIGludChjb25maWdbMl0pICE9IDA6CiAgICAgICAgYV9zZWxlY3RlZC5zZXQoVHJ1ZSkKICAgICAgICBhLnNlbGVjdCgpCiAgICAgICAgYV9zZWxlY3RlZF9vbGQuc2V0KFRydWUpCiAgICBlbHNlOgogICAgICAgIGFfc2VsZWN0ZWQuc2V0KEZhbHNlKQogICAgICAgIGEuZGVzZWxlY3QoKQogICAgICAgIGFfc2VsZWN0ZWRfb2xkLnNldChGYWxzZSkKICAgIGxvb3AgPSB0ay5Cb29sZWFuVmFyKCkKICAgIGxvb3Auc2V0KFRydWUpCiAgICB3aGlsZSBsb29wLmdldCgpOgogICAgICAgIHRyeToKICAgICAgICAgICAgc2V0dGluZ3Nfd2luZG93LnVwZGF0ZSgpCiAgICAgICAgICAgIGlmIGFfc2VsZWN0ZWQuZ2V0KCkgIT0gYV9zZWxlY3RlZF9vbGQuZ2V0KCk6CiAgICAgICAgICAgICAgICBhX3NlbGVjdGVkX29sZC5zZXQoYV9zZWxlY3RlZC5nZXQoKSkKICAgICAgICAgICAgICAgIGlmIGFfc2VsZWN0ZWQuZ2V0KCk6CiAgICAgICAgICAgICAgICAgICAgY29uZmlnWzJdID0gc3RyKGludCh0aW1lLnRpbWUoKSkpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGNvbmZpZ1syXSA9IHN0cigwKQogICAgICAgICAgICAgICAgd2l0aCBvcGVuKHJlbGF0aXZlX2ZpbGUoJ3NyYy9hcHBzL1Bhc3N3b3JkTWFuYWdlci8nICsgJ2NvbmZpZy50eHQnKSwgJ3cnKSBhcyBjb25maWdfZmlsZToKICAgICAgICAgICAgICAgICAgICBjb25maWdfZmlsZS53cml0ZWxpbmVzKGNvbmZpZykKICAgICAgICBleGNlcHQgdGsuVGNsRXJyb3I6CiAgICAgICAgICAgIGxvb3Auc2V0KEZhbHNlKQoKCmRlZiBjaGFuZ2VfcGFzc3dvcmQoKSAtPiBOb25lOgogICAgZ2xvYmFsIF9wYXNzd29yZAogICAgaWYgbWVzc2FnZWJveC5hc2t5ZXNub2NhbmNlbCh0cmFuc2xhdGUoNDQpICsgJyAtICcgKyB0cmFuc2xhdGUoMSksIHRyYW5zbGF0ZSgzNikgKyAnXG4nICsgdHJhbnNsYXRlKDM4KSk6CiAgICAgICAgb2xkX3Bhc3N3b3JkID0gX3Bhc3N3b3JkCiAgICAgICAgaW5mb3JtYXRpb25zID0gZ2V0X2luZm9ybWF0aW9ucyhfcGFzc3dvcmQpCiAgICAgICAgY2hhbmdlX3dpbmRvdyA9IHRrLlRrKCkKICAgICAgICBjaGFuZ2Vfd2luZG93LnRpdGxlKHRyYW5zbGF0ZSg0NCkgKyAnIC0gJyArIHRyYW5zbGF0ZSgxKSkKICAgICAgICBhMSA9IHRrLkxhYmVsKGNoYW5nZV93aW5kb3csIHRleHQ9dHJhbnNsYXRlKDQ2KSwgd2lkdGg9MzIpCiAgICAgICAgYTIgPSB0ay5FbnRyeShjaGFuZ2Vfd2luZG93LCB3aWR0aD0zMikKICAgICAgICBiMSA9IHRrLkxhYmVsKGNoYW5nZV93aW5kb3csIHRleHQ9dHJhbnNsYXRlKDQ3KSwgd2lkdGg9MzIpCiAgICAgICAgYjIgPSB0ay5FbnRyeShjaGFuZ2Vfd2luZG93LCB3aWR0aD0zMikKICAgICAgICBjMSA9IHRrLkxhYmVsKGNoYW5nZV93aW5kb3csIHRleHQ9dHJhbnNsYXRlKDQ4KSwgd2lkdGg9MzIpCiAgICAgICAgYzIgPSB0ay5FbnRyeShjaGFuZ2Vfd2luZG93LCB3aWR0aD0zMikKICAgICAgICBkID0gdGsuTGFiZWwoY2hhbmdlX3dpbmRvdywgdGV4dD0nJykKICAgICAgICBlMV9wcmVzc2VkID0gdGsuQm9vbGVhblZhcigpCiAgICAgICAgZTFfcHJlc3NlZC5zZXQoRmFsc2UpCiAgICAgICAgZTEgPSB0ay5CdXR0b24oY2hhbmdlX3dpbmRvdywgdGV4dD10cmFuc2xhdGUoNDkpLCBjb21tYW5kPWxhbWJkYTogZTFfcHJlc3NlZC5zZXQoVHJ1ZSksIHdpZHRoPTMyKQogICAgICAgIGUyX3ByZXNzZWQgPSB0ay5Cb29sZWFuVmFyKCkKICAgICAgICBlMl9wcmVzc2VkLnNldChGYWxzZSkKICAgICAgICBlMiA9IHRrLkJ1dHRvbihjaGFuZ2Vfd2luZG93LCB0ZXh0PXRyYW5zbGF0ZSgyNSksIGNvbW1hbmQ9bGFtYmRhOiBlMV9wcmVzc2VkLnNldChUcnVlKSwgd2lkdGg9MzIpCiAgICAgICAgYTEuZ3JpZChyb3c9MCwgY29sdW1uPTApCiAgICAgICAgYTIuZ3JpZChyb3c9MCwgY29sdW1uPTEpCiAgICAgICAgYjEuZ3JpZChyb3c9MSwgY29sdW1uPTApCiAgICAgICAgYjIuZ3JpZChyb3c9MSwgY29sdW1uPTEpCiAgICAgICAgYzEuZ3JpZChyb3c9MiwgY29sdW1uPTApCiAgICAgICAgYzIuZ3JpZChyb3c9MiwgY29sdW1uPTEpCiAgICAgICAgZC5ncmlkKHJvdz0zLCBjb2x1bW49MCwgY29sdW1uc3Bhbj0yKQogICAgICAgIGUxLmdyaWQocm93PTQsIGNvbHVtbj0wKQogICAgICAgIGUyLmdyaWQocm93PTQsIGNvbHVtbj0xKQogICAgICAgIGxvb3AgPSB0ay5Cb29sZWFuVmFyKCkKICAgICAgICBsb29wLnNldChUcnVlKQogICAgICAgIHdoaWxlIGxvb3AuZ2V0KCk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIGEyLmdldCgpICE9IG9sZF9wYXNzd29yZCBvciAnICcgaW4gYjIuZ2V0KCkgb3IgYjIuZ2V0KCkgIT0gYzIuZ2V0KCkgb3IgXAogICAgICAgICAgICAgICAgICAgICAgICBub3QgaXNfc2VjdXJlX3Bhc3N3b3JkKGIyLmdldCgpKToKICAgICAgICAgICAgICAgICAgICBlMi5jb25maWcoc3RhdGU9dGsuRElTQUJMRUQpCiAgICAgICAgICAgICAgICAgICAgZC5jb25maWcodGV4dD10cmFuc2xhdGUoNDUpKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBlMi5jb25maWcoc3RhdGU9dGsuTk9STUFMKQogICAgICAgICAgICAgICAgICAgIGQuY29uZmlnKHRleHQ9JycpCiAgICAgICAgICAgICAgICBjaGFuZ2Vfd2luZG93LnVwZGF0ZSgpCiAgICAgICAgICAgICAgICBpZiBlMV9wcmVzc2VkLmdldCgpOgogICAgICAgICAgICAgICAgICAgIGUxX3ByZXNzZWQuc2V0KEZhbHNlKQogICAgICAgICAgICAgICAgICAgIGxvb3Auc2V0KEZhbHNlKQogICAgICAgICAgICAgICAgICAgIGNoYW5nZV93aW5kb3cuZGVzdHJveSgpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgICAgIGlmIGUyX3ByZXNzZWQuZ2V0KCk6CiAgICAgICAgICAgICAgICAgICAgZTFfcHJlc3NlZC5zZXQoRmFsc2UpCiAgICAgICAgICAgICAgICAgICAgbG9vcC5zZXQoRmFsc2UpCiAgICAgICAgICAgICAgICAgICAgY2hhbmdlX3dpbmRvdy5kZXN0cm95KCkKICAgICAgICAgICAgICAgICAgICBfcGFzc3dvcmQgPSBiMi5nZXQoKQogICAgICAgICAgICAgICAgICAgIHdpdGggb3BlbihyZWxhdGl2ZV9maWxlKCdzcmMvYXBwcy9QYXNzd29yZE1hbmFnZXIvJyArICdwYXNzd29yZHMuYmluJyksICd3YicpIGFzIHBhc3N3b3JkX2ZpbGU6CiAgICAgICAgICAgICAgICAgICAgICAgIGNpcGhlciA9IGVuY3J5cHQoc3RyKGluZm9ybWF0aW9ucyksIF9wYXNzd29yZCkKICAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmRfZmlsZS53cml0ZShjaXBoZXIpCiAgICAgICAgICAgIGV4Y2VwdCB0ay5UY2xFcnJvcjoKICAgICAgICAgICAgICAgIGxvb3Auc2V0KEZhbHNlKQogICAgZWxzZToKICAgICAgICByZXR1cm4gTm9uZQoKCmRlZiBvcGVuX2Fib3V0KCkgLT4gTm9uZToKICAgIG1lc3NhZ2Vib3guc2hvd2luZm8odHJhbnNsYXRlKDE1KSArICcgLSAnICsgdHJhbnNsYXRlKDEpLCB0cmFuc2xhdGUoMTcpICsgJ1xuJyArIHRyYW5zbGF0ZSgxOCkpCgoKZGVmIGZvcmdvdF9wYXNzd29yZCgpIC0-IE5vbmU6CiAgICBtZXNzYWdlYm94LnNob3dpbmZvKHRyYW5zbGF0ZSg0MSkgKyAnIC0gJyArIHRyYW5zbGF0ZSgxKSwgdHJhbnNsYXRlKDQyKSkKCgpkZWYgZWRpdF9kaWFsb2cobmFtZTogc3RyKSAtPiBOb25lOgogICAgZ2xvYmFsIF9wYXNzd29yZAogICAgZWRpdF93aW5kb3cgPSB0ay5UaygpCiAgICBlZGl0X3dpbmRvdy50aXRsZSh0cmFuc2xhdGUoMTMpICsgJyAtICcgKyB0cmFuc2xhdGUoMSkpCiAgICBhMSA9IHRrLkxhYmVsKGVkaXRfd2luZG93LCB0ZXh0PXRyYW5zbGF0ZSg0KSArICc6Jywgd2lkdGg9MTYpCiAgICBhMiA9IHRrLkVudHJ5KGVkaXRfd2luZG93LCB3aWR0aD0zMikKICAgIGIxID0gdGsuTGFiZWwoZWRpdF93aW5kb3csIHRleHQ9dHJhbnNsYXRlKDUpICsgJy8nICsgdHJhbnNsYXRlKDYpICsgJzonLCB3aWR0aD0xNikKICAgIGIyID0gdGsuRW50cnkoZWRpdF93aW5kb3csIHdpZHRoPTMyKQogICAgYzEgPSB0ay5MYWJlbChlZGl0X3dpbmRvdywgdGV4dD10cmFuc2xhdGUoNykgKyAnOicsIHdpZHRoPTE2KQogICAgYzIgPSB0ay5FbnRyeShlZGl0X3dpbmRvdywgd2lkdGg9MzIpCiAgICBkMSA9IHRrLkxhYmVsKGVkaXRfd2luZG93LCB0ZXh0PXRyYW5zbGF0ZSg4KSArICc6Jywgd2lkdGg9MTYpCiAgICBkMiA9IHRrLkVudHJ5KGVkaXRfd2luZG93LCB3aWR0aD0zMikKICAgIGUyX3ByZXNzZWQgPSB0ay5Cb29sZWFuVmFyKCkKICAgIGUyX3ByZXNzZWQuc2V0KEZhbHNlKQogICAgZTIgPSB0ay5CdXR0b24oZWRpdF93aW5kb3csIHRleHQ9dHJhbnNsYXRlKDEyKSwgY29tbWFuZD1sYW1iZGE6IGUyX3ByZXNzZWQuc2V0KFRydWUpLCB3aWR0aD0zMikKICAgIGYgPSB0ay5MYWJlbChlZGl0X3dpbmRvdywgdGV4dD0nJykKICAgIGdfcHJlc3NlZCA9IHRrLkJvb2xlYW5WYXIoKQogICAgZ19wcmVzc2VkLnNldChGYWxzZSkKICAgIGcgPSB0ay5CdXR0b24oZWRpdF93aW5kb3csIHRleHQ9dHJhbnNsYXRlKDEzKSwgY29tbWFuZD1sYW1iZGE6IGdfcHJlc3NlZC5zZXQoVHJ1ZSksIHdpZHRoPTUwKQogICAgYTEuZ3JpZChyb3c9MCwgY29sdW1uPTApCiAgICBhMi5ncmlkKHJvdz0wLCBjb2x1bW49MSkKICAgIGIxLmdyaWQocm93PTEsIGNvbHVtbj0wKQogICAgYjIuZ3JpZChyb3c9MSwgY29sdW1uPTEpCiAgICBjMS5ncmlkKHJvdz0yLCBjb2x1bW49MCkKICAgIGMyLmdyaWQocm93PTIsIGNvbHVtbj0xKQogICAgZDEuZ3JpZChyb3c9MywgY29sdW1uPTApCiAgICBkMi5ncmlkKHJvdz0zLCBjb2x1bW49MSkKICAgIGUyLmdyaWQocm93PTQsIGNvbHVtbj0xKQogICAgZi5ncmlkKHJvdz01LCBjb2x1bW49MCwgY29sdW1uc3Bhbj0yKQogICAgZy5ncmlkKHJvdz02LCBjb2x1bW49MCwgY29sdW1uc3Bhbj0yKQogICAgaW5mb3JtYXRpb24gPSBnZXRfaW5mb3JtYXRpb24obmFtZSwgX3Bhc3N3b3JkKQogICAgYTIuaW5zZXJ0KDAsIGluZm9ybWF0aW9uWzBdKQogICAgYjIuaW5zZXJ0KDAsIGluZm9ybWF0aW9uWzFdKQogICAgYzIuaW5zZXJ0KDAsIGluZm9ybWF0aW9uWzJdKQogICAgZDIuaW5zZXJ0KDAsIGluZm9ybWF0aW9uWzNdKQogICAgbG9vcCA9IHRrLkJvb2xlYW5WYXIoKQogICAgbG9vcC5zZXQoVHJ1ZSkKICAgIHdoaWxlIGxvb3AuZ2V0KCk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZiBhMi5nZXQoKSA9PSAnJyBvciBiMi5nZXQoKSA9PSAnJyBvciBjMi5nZXQoKSA9PSAnJyBvciBkMi5nZXQoKSA9PSAnJyBvciBcCiAgICAgICAgICAgICAgICAgICAgKGEyLmdldCgpIGluIGdldF9uYW1lcyhfcGFzc3dvcmQpIGFuZCBub3QgYTIuZ2V0KCkgPT0gbmFtZSk6CiAgICAgICAgICAgICAgICBnLmNvbmZpZyhzdGF0ZT10ay5ESVNBQkxFRCkKICAgICAgICAgICAgICAgIGYuY29uZmlnKHRleHQ9dHJhbnNsYXRlKDQ1KSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGcuY29uZmlnKHN0YXRlPXRrLk5PUk1BTCkKICAgICAgICAgICAgICAgIGYuY29uZmlnKHRleHQ9JycpCiAgICAgICAgICAgIGlmIGUyX3ByZXNzZWQuZ2V0KCk6CiAgICAgICAgICAgICAgICBlMl9wcmVzc2VkLnNldChGYWxzZSkKICAgICAgICAgICAgICAgIGdlbmVyYXRlX3dpbmRvdyA9IHRrLlRrKCkKICAgICAgICAgICAgICAgIGdlbmVyYXRlX3dpbmRvdy50aXRsZSh0cmFuc2xhdGUoMTIpICsgJyAtICcgKyB0cmFuc2xhdGUoMSkpCiAgICAgICAgICAgICAgICB4ID0gdGsuTGFiZWwoZ2VuZXJhdGVfd2luZG93LCB0ZXh0PXRyYW5zbGF0ZSg0MCkpCiAgICAgICAgICAgICAgICB5ID0gdGsuRW50cnkoZ2VuZXJhdGVfd2luZG93LCB3aWR0aD0xNikKICAgICAgICAgICAgICAgIHpfcHJlc3NlZCA9IHRrLkJvb2xlYW5WYXIoKQogICAgICAgICAgICAgICAgel9wcmVzc2VkLnNldChGYWxzZSkKICAgICAgICAgICAgICAgIHogPSB0ay5CdXR0b24oZ2VuZXJhdGVfd2luZG93LCB0ZXh0PXRyYW5zbGF0ZSgyNSksIHdpZHRoPTE2LCBjb21tYW5kPWxhbWJkYTogel9wcmVzc2VkLnNldChUcnVlKSkKICAgICAgICAgICAgICAgIHguZ3JpZChyb3c9MCwgY29sdW1uPTApCiAgICAgICAgICAgICAgICB5LmdyaWQocm93PTEsIGNvbHVtbj0wKQogICAgICAgICAgICAgICAgei5ncmlkKHJvdz0yLCBjb2x1bW49MCkKICAgICAgICAgICAgICAgIGxvb3AyID0gdGsuQm9vbGVhblZhcigpCiAgICAgICAgICAgICAgICBsb29wMi5zZXQoVHJ1ZSkKICAgICAgICAgICAgICAgIHdoaWxlIGxvb3AyLmdldCgpOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50KHkuZ2V0KCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6LmNvbmZpZyhzdGF0ZT10ay5OT1JNQUwpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCAoVmFsdWVFcnJvciwgVHlwZUVycm9yKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHouY29uZmlnKHN0YXRlPXRrLkRJU0FCTEVEKQogICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZV93aW5kb3cudXBkYXRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgel9wcmVzc2VkLmdldCgpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlfaW50ID0gaW50KHkuZ2V0KCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZDIuZGVsZXRlKDAsIGxlbihkMi5nZXQoKSkgKyAxKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQyLmluc2VydCgwLCBnZW5lcmF0ZV9wYXNzd29yZCh5X2ludCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9vcDIuc2V0KEZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlX3dpbmRvdy5kZXN0cm95KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCAoVmFsdWVFcnJvciwgVHlwZUVycm9yKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IHRrLlRjbEVycm9yOgogICAgICAgICAgICAgICAgICAgICAgICBsb29wMi5zZXQoRmFsc2UpCiAgICAgICAgICAgIGVkaXRfd2luZG93LnVwZGF0ZSgpCiAgICAgICAgICAgIGlmIGdfcHJlc3NlZC5nZXQoKToKICAgICAgICAgICAgICAgIGdfcHJlc3NlZC5zZXQoRmFsc2UpCiAgICAgICAgICAgICAgICBuYW1lcyA9IGdldF9uYW1lcyhfcGFzc3dvcmQpCiAgICAgICAgICAgICAgICBpbmZvcm1hdGlvbnMgPSBnZXRfaW5mb3JtYXRpb25zKF9wYXNzd29yZCkKICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uc1tuYW1lcy5pbmRleChuYW1lKV0gPSBbYTIuZ2V0KCksIGIyLmdldCgpLCBjMi5nZXQoKSwgZDIuZ2V0KCldCiAgICAgICAgICAgICAgICBjaGFuZ2VfaW5mb3JtYXRpb24oaW5mb3JtYXRpb25zKQogICAgICAgICAgICAgICAgbG9vcC5zZXQoRmFsc2UpCiAgICAgICAgICAgICAgICBlZGl0X3dpbmRvdy5kZXN0cm95KCkKICAgICAgICBleGNlcHQgdGsuVGNsRXJyb3I6CiAgICAgICAgICAgIGxvb3Auc2V0KEZhbHNlKQoKCmRlZiBpbml0KCkgLT4gc3RyOgogICAgdHJhbnNsYXRlX2luaXQoKQogICAgaWYgb3MucGF0aC5leGlzdHMoJ3Bhc3N3b3Jkcy5iaW4nKSBhbmQgb3MucGF0aC5leGlzdHMoJ2NvbmZpZy50eHQnKToKICAgICAgICBiYWNrdXBfbWVzc2FnZSgpCiAgICAgICAgd2l0aCBvcGVuKHJlbGF0aXZlX2ZpbGUoJ3NyYy9hcHBzL1Bhc3N3b3JkTWFuYWdlci8nICsgJ2NvbmZpZy50eHQnKSwgJ3InKSBhcyBjb25maWdfZmlsZToKICAgICAgICAgICAgY29uZmlnX2ZpbGVfY29udGVudCA9IGNvbmZpZ19maWxlLnJlYWRsaW5lcygpCiAgICAgICAgICAgIGluaXRfd2luZG93ID0gdGsuVGsoKQogICAgICAgICAgICBpbml0X3dpbmRvdy50aXRsZSh0cmFuc2xhdGUoMTkpICsgJyEgLSAnICsgdHJhbnNsYXRlKDEpKQogICAgICAgICAgICBhID0gdGsuTGFiZWwoaW5pdF93aW5kb3csIHRleHQ9dHJhbnNsYXRlKDI4KSkKICAgICAgICAgICAgYiA9IHRrLkVudHJ5KGluaXRfd2luZG93LCBzaG93PScqJywgd2lkdGg9MzIpCiAgICAgICAgICAgIGMgPSB0ay5CdXR0b24oaW5pdF93aW5kb3csIHRleHQ9dHJhbnNsYXRlKDI1KSwgY29tbWFuZD1sYW1iZGE6IGxvb3AyLnNldChGYWxzZSkpCiAgICAgICAgICAgIGQgPSB0ay5CdXR0b24oaW5pdF93aW5kb3csIHRleHQ9dHJhbnNsYXRlKDQxKSwgY29tbWFuZD1mb3Jnb3RfcGFzc3dvcmQpCiAgICAgICAgICAgIGEuZ3JpZChyb3c9MCwgY29sdW1uPTApCiAgICAgICAgICAgIGIuZ3JpZChyb3c9MSwgY29sdW1uPTApCiAgICAgICAgICAgIGMuZ3JpZChyb3c9MiwgY29sdW1uPTApCiAgICAgICAgICAgIGQuZ3JpZCgpCiAgICAgICAgICAgIGxvb3AgPSB0ay5Cb29sZWFuVmFyKCkKICAgICAgICAgICAgbG9vcC5zZXQoVHJ1ZSkKICAgICAgICAgICAgd2hpbGUgbG9vcC5nZXQoKToKICAgICAgICAgICAgICAgIGxvb3AyID0gdGsuQm9vbGVhblZhcigpCiAgICAgICAgICAgICAgICBsb29wMi5zZXQoVHJ1ZSkKICAgICAgICAgICAgICAgIHdoaWxlIGxvb3AyLmdldCgpOgogICAgICAgICAgICAgICAgICAgIGlmIGIuZ2V0KCkgPT0gJycgb3IgJyAnIGluIGIuZ2V0KCk6CiAgICAgICAgICAgICAgICAgICAgICAgIGMuY29uZmlnKHN0YXRlPXRrLkRJU0FCTEVEKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIGMuY29uZmlnKHN0YXRlPXRrLk5PUk1BTCkKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRfd2luZG93LnVwZGF0ZSgpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IHRrLlRjbEVycm9yOgogICAgICAgICAgICAgICAgICAgICAgICBzeXMuZXhpdCgpCiAgICAgICAgICAgICAgICBwYXNzd29yZCA9IGIuZ2V0KCkKICAgICAgICAgICAgICAgIHNhbHQgPSBsaXRlcmFsX2V2YWwoY29uZmlnX2ZpbGVfY29udGVudFsxXS5yZXBsYWNlKCdcbicsICcnKSkKICAgICAgICAgICAgICAgIGhhc2hlZCA9IHN0cihoYXNobGliLnBia2RmMl9obWFjKCdzaGE1MTInLCBwYXNzd29yZC5lbmNvZGUoKSwgc2FsdCwgMTI4MDAwKSkKICAgICAgICAgICAgICAgIGlmIGhhc2hlZCA9PSBjb25maWdfZmlsZV9jb250ZW50WzBdLnJlcGxhY2UoJ1xuJywgJycpOgogICAgICAgICAgICAgICAgICAgIGluaXRfd2luZG93LmRlc3Ryb3koKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXNzd29yZAogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlYm94LnNob3dlcnJvcih0cmFuc2xhdGUoMjkpICsgJyAtICcgKyB0cmFuc2xhdGUoMSksIHRyYW5zbGF0ZSgzMCkpCiAgICBlbHNlOgogICAgICAgIHBhc3N3b3JkX2ZpbGVfZXhpc3RzID0gb3MucGF0aC5leGlzdHMoJ3Bhc3N3b3Jkcy5iaW4nKQogICAgICAgIGNvbmZpZ19maWxlX2V4aXN0cyA9IG9zLnBhdGguZXhpc3RzKCdjb25maWcudHh0JykKICAgICAgICBpZiBub3QgcGFzc3dvcmRfZmlsZV9leGlzdHMgYW5kIG5vdCBjb25maWdfZmlsZV9leGlzdHM6CiAgICAgICAgICAgIHJldHVybiBzZXR1cCgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVjb3ZlcigpCgoKZGVmIG1haW4oKSAtPiBib29sOgogICAgZ2xvYmFsIF9wYXNzd29yZAogICAgcm9vdCA9IHRrLlRrKCkKICAgIHJvb3QudGl0bGUodHJhbnNsYXRlKDMzKSArICcgLSAnICsgdHJhbnNsYXRlKDEpKQogICAgYV9pbmRleCA9IHRrLkludFZhcigpCiAgICBhX2luZGV4LnNldCgwKQogICAgYTJfcHJlc3NlZCA9IHRrLkJvb2xlYW5WYXIoKQogICAgYTJfcHJlc3NlZC5zZXQoRmFsc2UpCiAgICBhMiA9IHRrLkJ1dHRvbihyb290LCB0ZXh0PScvXFwnLCBjb21tYW5kPWxhbWJkYTogYTJfcHJlc3NlZC5zZXQoVHJ1ZSkpCiAgICBhN19wcmVzc2VkID0gdGsuQm9vbGVhblZhcigpCiAgICBhN19wcmVzc2VkLnNldChGYWxzZSkKICAgIGE3ID0gdGsuQnV0dG9uKHJvb3QsIHRleHQ9J1xcLycsIGNvbW1hbmQ9bGFtYmRhOiBhN19wcmVzc2VkLnNldChUcnVlKSkKICAgIGIxID0gdGsuQnV0dG9uKHJvb3QsIHRleHQ9dHJhbnNsYXRlKDE2KSwgY29tbWFuZD1hZGRfaW5mb3JtYXRpb25fZGlhbG9nLCB3aWR0aD0zMikKICAgIGJfc2VsZWN0ZWQgPSB0ay5JbnRWYXIoKQogICAgYl9zZWxlY3RlZC5zZXQoMCkKICAgIGIyX25hbWUgPSB0ay5TdHJpbmdWYXIoKQogICAgYjIgPSB0ay5CdXR0b24ocm9vdCwgdGV4dD1iMl9uYW1lLmdldCgpLCBjb21tYW5kPWxhbWJkYTogYl9zZWxlY3RlZC5zZXQoMSksIHdpZHRoPTMyKQogICAgYjNfbmFtZSA9IHRrLlN0cmluZ1ZhcigpCiAgICBiMyA9IHRrLkJ1dHRvbihyb290LCB0ZXh0PWIzX25hbWUuZ2V0KCksIGNvbW1hbmQ9bGFtYmRhOiBiX3NlbGVjdGVkLnNldCgyKSwgd2lkdGg9MzIpCiAgICBiNF9uYW1lID0gdGsuU3RyaW5nVmFyKCkKICAgIGI0ID0gdGsuQnV0dG9uKHJvb3QsIHRleHQ9YjRfbmFtZS5nZXQoKSwgY29tbWFuZD1sYW1iZGE6IGJfc2VsZWN0ZWQuc2V0KDMpLCB3aWR0aD0zMikKICAgIGI1X25hbWUgPSB0ay5TdHJpbmdWYXIoKQogICAgYjUgPSB0ay5CdXR0b24ocm9vdCwgdGV4dD1iNV9uYW1lLmdldCgpLCBjb21tYW5kPWxhbWJkYTogYl9zZWxlY3RlZC5zZXQoNCksIHdpZHRoPTMyKQogICAgYjZfbmFtZSA9IHRrLlN0cmluZ1ZhcigpCiAgICBiNiA9IHRrLkJ1dHRvbihyb290LCB0ZXh0PWI2X25hbWUuZ2V0KCksIGNvbW1hbmQ9bGFtYmRhOiBiX3NlbGVjdGVkLnNldCg1KSwgd2lkdGg9MzIpCiAgICBiN19uYW1lID0gdGsuU3RyaW5nVmFyKCkKICAgIGI3ID0gdGsuQnV0dG9uKHJvb3QsIHRleHQ9YjdfbmFtZS5nZXQoKSwgY29tbWFuZD1sYW1iZGE6IGJfc2VsZWN0ZWQuc2V0KDYpLCB3aWR0aD0zMikKICAgIGI4X3ByZXNzZWQgPSB0ay5Cb29sZWFuVmFyKCkKICAgIGI4X3ByZXNzZWQuc2V0KEZhbHNlKQogICAgYjggPSB0ay5CdXR0b24ocm9vdCwgdGV4dD10cmFuc2xhdGUoMTQpLCBjb21tYW5kPWxhbWJkYTogYjhfcHJlc3NlZC5zZXQoVHJ1ZSksIHdpZHRoPTMyKQogICAgYzEgPSB0ay5MYWJlbChyb290LCB0ZXh0PScnLCB3aWR0aD04KQogICAgZDFfcHJlc3NlZCA9IHRrLkJvb2xlYW5WYXIoKQogICAgZDFfcHJlc3NlZC5zZXQoRmFsc2UpCiAgICBkMSA9IHRrLkJ1dHRvbihyb290LCB0ZXh0PXRyYW5zbGF0ZSgyKSwgY29tbWFuZD1sYW1iZGE6IGQxX3ByZXNzZWQuc2V0KFRydWUpLCB3aWR0aD0xNikKICAgIGQyID0gdGsuTGFiZWwocm9vdCwgdGV4dD10cmFuc2xhdGUoNCkgKyAnOicpCiAgICBkMyA9IHRrLkxhYmVsKHJvb3QsIHRleHQ9dHJhbnNsYXRlKDUpICsgJy8nICsgdHJhbnNsYXRlKDYpICsgJzonKQogICAgZDQgPSB0ay5MYWJlbChyb290LCB0ZXh0PXRyYW5zbGF0ZSg3KSArICc6JykKICAgIGQ1ID0gdGsuTGFiZWwocm9vdCwgdGV4dD10cmFuc2xhdGUoOCkgKyAnOicpCiAgICBkNl9wcmVzc2VkID0gdGsuQm9vbGVhblZhcigpCiAgICBkNl9wcmVzc2VkLnNldChGYWxzZSkKICAgIGQ2ID0gdGsuQnV0dG9uKHJvb3QsIHRleHQ9dHJhbnNsYXRlKDkpLCBjb21tYW5kPWxhbWJkYTogZDZfcHJlc3NlZC5zZXQoVHJ1ZSksIHdpZHRoPTE2KQogICAgZDdfcHJlc3NlZCA9IHRrLkJvb2xlYW5WYXIoKQogICAgZDdfcHJlc3NlZC5zZXQoRmFsc2UpCiAgICBkNyA9IHRrLkJ1dHRvbihyb290LCB0ZXh0PXRyYW5zbGF0ZSgxMiksIGNvbW1hbmQ9bGFtYmRhOiBkN19wcmVzc2VkLnNldChUcnVlKSwgd2lkdGg9MTYpCiAgICBkOCA9IHRrLkJ1dHRvbihyb290LCB0ZXh0PXRyYW5zbGF0ZSgxNSksIGNvbW1hbmQ9b3Blbl9hYm91dCwgd2lkdGg9MTYpCiAgICBlMV9wcmVzc2VkID0gdGsuQm9vbGVhblZhcigpCiAgICBlMV9wcmVzc2VkLnNldChGYWxzZSkKICAgIGUxID0gdGsuQnV0dG9uKHJvb3QsIHRleHQ9dHJhbnNsYXRlKDMpLCBjb21tYW5kPWxhbWJkYTogZTFfcHJlc3NlZC5zZXQoVHJ1ZSksIHdpZHRoPTMyKQogICAgZTJfY29udGVudCA9IHRrLlN0cmluZ1ZhcigpCiAgICBlMiA9IHRrLkxhYmVsKHJvb3QsIHRleHQ9ZTJfY29udGVudC5nZXQoKSkKICAgIGUzX2NvbnRlbnQgPSB0ay5TdHJpbmdWYXIoKQogICAgZTMgPSB0ay5MYWJlbChyb290LCB0ZXh0PWUzX2NvbnRlbnQuZ2V0KCkpCiAgICBlNF9jb250ZW50ID0gdGsuU3RyaW5nVmFyKCkKICAgIGU0ID0gdGsuTGFiZWwocm9vdCwgdGV4dD1lNF9jb250ZW50LmdldCgpKQogICAgZTVfY29udGVudCA9IHRrLlN0cmluZ1ZhcigpCiAgICBlNSA9IHRrLkxhYmVsKHJvb3QsIHRleHQ9ZTVfY29udGVudC5nZXQoKSkKICAgIGU2X3ByZXNzZWQgPSB0ay5Cb29sZWFuVmFyKCkKICAgIGU2X3ByZXNzZWQuc2V0KEZhbHNlKQogICAgZTZfZGlzcGxheSA9IHRrLkludFZhcigpCiAgICBlNl9kaXNwbGF5LnNldCgxMCkKICAgIGU2X2NvbnRlbnQgPSB0ay5TdHJpbmdWYXIoKQogICAgZTZfY29udGVudC5zZXQodHJhbnNsYXRlKGU2X2Rpc3BsYXkuZ2V0KCkpKQogICAgZTYgPSB0ay5CdXR0b24ocm9vdCwgdGV4dD1lNl9jb250ZW50LmdldCgpLCBjb21tYW5kPWxhbWJkYTogZTZfcHJlc3NlZC5zZXQoVHJ1ZSksIHdpZHRoPTMyKQogICAgZTdfcHJlc3NlZCA9IHRrLkJvb2xlYW5WYXIoKQogICAgZTdfcHJlc3NlZC5zZXQoRmFsc2UpCiAgICBlNyA9IHRrLkJ1dHRvbihyb290LCB0ZXh0PXRyYW5zbGF0ZSgxMyksIGNvbW1hbmQ9bGFtYmRhOiBlN19wcmVzc2VkLnNldChUcnVlKSwgd2lkdGg9MzIpCiAgICBlOCA9IHRrLkxhYmVsKHJvb3QsIHRleHQ9JycpCiAgICBhMi5ncmlkKHJvdz0xLCBjb2x1bW49MCkKICAgIGE3LmdyaWQocm93PTYsIGNvbHVtbj0wKQogICAgYjEuZ3JpZChyb3c9MCwgY29sdW1uPTEpCiAgICBiMi5ncmlkKHJvdz0xLCBjb2x1bW49MSkKICAgIGIzLmdyaWQocm93PTIsIGNvbHVtbj0xKQogICAgYjQuZ3JpZChyb3c9MywgY29sdW1uPTEpCiAgICBiNS5ncmlkKHJvdz00LCBjb2x1bW49MSkKICAgIGI2LmdyaWQocm93PTUsIGNvbHVtbj0xKQogICAgYjcuZ3JpZChyb3c9NiwgY29sdW1uPTEpCiAgICBiOC5ncmlkKHJvdz03LCBjb2x1bW49MSkKICAgIGMxLmdyaWQocm93PTAsIGNvbHVtbj0yKQogICAgZDEuZ3JpZChyb3c9MCwgY29sdW1uPTMpCiAgICBkMi5ncmlkKHJvdz0xLCBjb2x1bW49MykKICAgIGQzLmdyaWQocm93PTIsIGNvbHVtbj0zKQogICAgZDQuZ3JpZChyb3c9MywgY29sdW1uPTMpCiAgICBkNS5ncmlkKHJvdz00LCBjb2x1bW49MykKICAgIGQ2LmdyaWQocm93PTUsIGNvbHVtbj0zKQogICAgZDcuZ3JpZChyb3c9NiwgY29sdW1uPTMpCiAgICBkOC5ncmlkKHJvdz03LCBjb2x1bW49MykKICAgIGUxLmdyaWQocm93PTAsIGNvbHVtbj00KQogICAgZTIuZ3JpZChyb3c9MSwgY29sdW1uPTQpCiAgICBlMy5ncmlkKHJvdz0yLCBjb2x1bW49NCkKICAgIGU0LmdyaWQocm93PTMsIGNvbHVtbj00KQogICAgZTUuZ3JpZChyb3c9NCwgY29sdW1uPTQpCiAgICBlNi5ncmlkKHJvdz01LCBjb2x1bW49NCkKICAgIGU3LmdyaWQocm93PTYsIGNvbHVtbj00KQogICAgZTguZ3JpZChyb3c9NywgY29sdW1uPTQpCiAgICBpbmZvcm1hdGlvbiA9IFsnJywgJycsICcnLCAnJ10KICAgIGxvb3AgPSB0ay5Cb29sZWFuVmFyKCkKICAgIGxvb3Auc2V0KFRydWUpCiAgICB3aGlsZSBsb29wLmdldCgpOgogICAgICAgIHRyeToKICAgICAgICAgICAgcm9vdC51cGRhdGUoKQogICAgICAgICAgICBuYW1lcyA9IGdldF9uYW1lcyhfcGFzc3dvcmQpCiAgICAgICAgICAgIGlmIGFfaW5kZXguZ2V0KCkgPD0gMDoKICAgICAgICAgICAgICAgIGEyLmNvbmZpZyhzdGF0ZT10ay5ESVNBQkxFRCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGEyLmNvbmZpZyhzdGF0ZT10ay5OT1JNQUwpCiAgICAgICAgICAgIGlmIGxlbihuYW1lcykgPD0gYV9pbmRleC5nZXQoKSArIDY6CiAgICAgICAgICAgICAgICBhNy5jb25maWcoc3RhdGU9dGsuRElTQUJMRUQpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBhNy5jb25maWcoc3RhdGU9dGsuTk9STUFMKQogICAgICAgICAgICBpZiBhMl9wcmVzc2VkLmdldCgpOgogICAgICAgICAgICAgICAgYTJfcHJlc3NlZC5zZXQoRmFsc2UpCiAgICAgICAgICAgICAgICBhX2luZGV4LnNldChhX2luZGV4LmdldCgpIC0gMSkKICAgICAgICAgICAgaWYgYTdfcHJlc3NlZC5nZXQoKToKICAgICAgICAgICAgICAgIGE3X3ByZXNzZWQuc2V0KEZhbHNlKQogICAgICAgICAgICAgICAgYV9pbmRleC5zZXQoYV9pbmRleC5nZXQoKSArIDEpCiAgICAgICAgICAgIGJfbGlzdCA9IFtdCiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKDYpOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGJfbGlzdC5hcHBlbmQobmFtZXNbYV9pbmRleC5nZXQoKSArIGldKQogICAgICAgICAgICAgICAgZXhjZXB0IEluZGV4RXJyb3I6CiAgICAgICAgICAgICAgICAgICAgYl9saXN0LmFwcGVuZCgnJykKICAgICAgICAgICAgaWYgYl9saXN0WzBdICE9ICcnOgogICAgICAgICAgICAgICAgYjIuY29uZmlnKHRleHQ9Yl9saXN0WzBdLCBzdGF0ZT10ay5OT1JNQUwpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBiMi5jb25maWcodGV4dD0nJywgc3RhdGU9dGsuRElTQUJMRUQpCiAgICAgICAgICAgIGlmIGJfbGlzdFsxXSAhPSAnJzoKICAgICAgICAgICAgICAgIGIzLmNvbmZpZyh0ZXh0PWJfbGlzdFsxXSwgc3RhdGU9dGsuTk9STUFMKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgYjMuY29uZmlnKHRleHQ9JycsIHN0YXRlPXRrLkRJU0FCTEVEKQogICAgICAgICAgICBpZiBiX2xpc3RbMl0gIT0gJyc6CiAgICAgICAgICAgICAgICBiNC5jb25maWcodGV4dD1iX2xpc3RbMl0sIHN0YXRlPXRrLk5PUk1BTCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGI0LmNvbmZpZyh0ZXh0PScnLCBzdGF0ZT10ay5ESVNBQkxFRCkKICAgICAgICAgICAgaWYgYl9saXN0WzNdICE9ICcnOgogICAgICAgICAgICAgICAgYjUuY29uZmlnKHRleHQ9Yl9saXN0WzNdLCBzdGF0ZT10ay5OT1JNQUwpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBiNS5jb25maWcodGV4dD0nJywgc3RhdGU9dGsuRElTQUJMRUQpCiAgICAgICAgICAgIGlmIGJfbGlzdFs0XSAhPSAnJzoKICAgICAgICAgICAgICAgIGI2LmNvbmZpZyh0ZXh0PWJfbGlzdFs0XSwgc3RhdGU9dGsuTk9STUFMKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgYjYuY29uZmlnKHRleHQ9JycsIHN0YXRlPXRrLkRJU0FCTEVEKQogICAgICAgICAgICBpZiBiX2xpc3RbNV0gIT0gJyc6CiAgICAgICAgICAgICAgICBiNy5jb25maWcodGV4dD1iX2xpc3RbNV0sIHN0YXRlPXRrLk5PUk1BTCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGI3LmNvbmZpZyh0ZXh0PScnLCBzdGF0ZT10ay5ESVNBQkxFRCkKICAgICAgICAgICAgaWYgYjhfcHJlc3NlZC5nZXQoKToKICAgICAgICAgICAgICAgIGI4X3ByZXNzZWQuc2V0KEZhbHNlKQogICAgICAgICAgICAgICAgc2V0dGluZ3NfbWVudSgpCiAgICAgICAgICAgIGlmIGQxX3ByZXNzZWQuZ2V0KCk6CiAgICAgICAgICAgICAgICBkMV9wcmVzc2VkLnNldChGYWxzZSkKICAgICAgICAgICAgICAgIHJvb3QuZGVzdHJveSgpCiAgICAgICAgICAgICAgICBsb29wLnNldChGYWxzZSkKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGlmIGJfc2VsZWN0ZWQuZ2V0KCkgPT0gMDoKICAgICAgICAgICAgICAgIGZvciBlbGVtZW50IGluIChkMiwgZDMsIGQ0LCBkNSwgZDYsIGQ3KToKICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmdyaWRfZm9yZ2V0KCkKICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gJycKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGQyLmdyaWQocm93PTEsIGNvbHVtbj0zKQogICAgICAgICAgICAgICAgZDMuZ3JpZChyb3c9MiwgY29sdW1uPTMpCiAgICAgICAgICAgICAgICBkNC5ncmlkKHJvdz0zLCBjb2x1bW49MykKICAgICAgICAgICAgICAgIGQ1LmdyaWQocm93PTQsIGNvbHVtbj0zKQogICAgICAgICAgICAgICAgZDYuZ3JpZChyb3c9NSwgY29sdW1uPTMpCiAgICAgICAgICAgICAgICBkNy5ncmlkKHJvdz02LCBjb2x1bW49MykKICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gbmFtZXNbYV9pbmRleC5nZXQoKSArIGJfc2VsZWN0ZWQuZ2V0KCkgLSAxXQogICAgICAgICAgICBpZiBkNl9wcmVzc2VkLmdldCgpOgogICAgICAgICAgICAgICAgZDZfcHJlc3NlZC5zZXQoRmFsc2UpCiAgICAgICAgICAgICAgICBpZiBpbmZvcm1hdGlvblszXSAhPSAnJzoKICAgICAgICAgICAgICAgICAgICBjb3B5KGluZm9ybWF0aW9uWzNdLCByb290KQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Vib3guc2hvd2luZm8odHJhbnNsYXRlKDM0KSArICcgLSAnICsgdHJhbnNsYXRlKDEpLCB0cmFuc2xhdGUoMzUpKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIGlmIGQ3X3ByZXNzZWQuZ2V0KCk6CiAgICAgICAgICAgICAgICBkN19wcmVzc2VkLnNldChGYWxzZSkKICAgICAgICAgICAgICAgIGlmIG1lc3NhZ2Vib3guYXNreWVzbm9jYW5jZWwodHJhbnNsYXRlKDM2KSArICcgLSAnICsgdHJhbnNsYXRlKDEpLCB0cmFuc2xhdGUoMzcpICsgdHJhbnNsYXRlKDM4KSk6CiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVfcGFzc3dvcmRfZGlhbG9nKGluZm9ybWF0aW9uWzBdKQogICAgICAgICAgICBpZiBzZWxlY3RlZCAhPSAnJzoKICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uID0gZ2V0X2luZm9ybWF0aW9uKHNlbGVjdGVkLCBfcGFzc3dvcmQpCiAgICAgICAgICAgICAgICBlMi5jb25maWcodGV4dD1zZWxlY3RlZCkKICAgICAgICAgICAgICAgIGUzLmNvbmZpZyh0ZXh0PWluZm9ybWF0aW9uWzFdKQogICAgICAgICAgICAgICAgZTQuY29uZmlnKHRleHQ9aW5mb3JtYXRpb25bMl0pCiAgICAgICAgICAgICAgICBlMi5ncmlkKHJvdz0xLCBjb2x1bW49NCkKICAgICAgICAgICAgICAgIGUzLmdyaWQocm93PTIsIGNvbHVtbj00KQogICAgICAgICAgICAgICAgZTQuZ3JpZChyb3c9MywgY29sdW1uPTQpCiAgICAgICAgICAgICAgICBlNS5ncmlkKHJvdz00LCBjb2x1bW49NCkKICAgICAgICAgICAgICAgIGU2LmdyaWQocm93PTUsIGNvbHVtbj00KQogICAgICAgICAgICAgICAgZTcuZ3JpZChyb3c9NiwgY29sdW1uPTQpCiAgICAgICAgICAgICAgICBpZiBlNl9kaXNwbGF5LmdldCgpID09IDExOgogICAgICAgICAgICAgICAgICAgIGU1LmNvbmZpZyh0ZXh0PWluZm9ybWF0aW9uWzNdKQogICAgICAgICAgICAgICAgICAgIGU2X2NvbnRlbnQuc2V0KHRyYW5zbGF0ZShlNl9kaXNwbGF5LmdldCgpKSkKICAgICAgICAgICAgICAgICAgICBlNi5jb25maWcodGV4dD1lNl9jb250ZW50LmdldCgpKQogICAgICAgICAgICAgICAgICAgIGlmIGU2X3ByZXNzZWQuZ2V0KCk6CiAgICAgICAgICAgICAgICAgICAgICAgIGU2X3ByZXNzZWQuc2V0KEZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICBlNl9kaXNwbGF5LnNldCgxMCkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgZTUuY29uZmlnKHRleHQ9JyoqKioqKioqKioqKioqKionKQogICAgICAgICAgICAgICAgICAgIGU2X2NvbnRlbnQuc2V0KHRyYW5zbGF0ZShlNl9kaXNwbGF5LmdldCgpKSkKICAgICAgICAgICAgICAgICAgICBlNi5jb25maWcodGV4dD1lNl9jb250ZW50LmdldCgpKQogICAgICAgICAgICAgICAgICAgIGlmIGU2X3ByZXNzZWQuZ2V0KCk6CiAgICAgICAgICAgICAgICAgICAgICAgIGU2X3ByZXNzZWQuc2V0KEZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICBlNl9kaXNwbGF5LnNldCgxMSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uID0gWycnLCAnJywgJycsICcnXQogICAgICAgICAgICAgICAgZm9yIGVsZW1lbnQgaW4gKGUyLCBlMywgZTQsIGU1LCBlNiwgZTcpOgogICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZ3JpZF9mb3JnZXQoKQoKICAgICAgICAgICAgaWYgZTFfcHJlc3NlZC5nZXQoKToKICAgICAgICAgICAgICAgIGUxX3ByZXNzZWQuc2V0KEZhbHNlKQogICAgICAgICAgICAgICAgbG9vcC5zZXQoRmFsc2UpCiAgICAgICAgICAgICAgICByb290LmRlc3Ryb3koKQogICAgICAgICAgICBpZiBlN19wcmVzc2VkLmdldCgpOgogICAgICAgICAgICAgICAgZTdfcHJlc3NlZC5zZXQoRmFsc2UpCiAgICAgICAgICAgICAgICBlZGl0X2RpYWxvZyhzZWxlY3RlZCkKICAgICAgICAgICAgZTguY29uZmlnKHRleHQ9Z2V0X3N0cmluZ190aW1lKCkpCiAgICAgICAgZXhjZXB0IHRrLlRjbEVycm9yOgogICAgICAgICAgICBsb29wLnNldChGYWxzZSkKICAgIHJldHVybiBGYWxzZQoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICBfbG9vcCA9IFRydWUKICAgIHByaW50KG9zLmdldGN3ZCgpKQogICAgd2hpbGUgX2xvb3A6CiAgICAgICAgX2xhbmd1YWdlID0gW10KICAgICAgICBfcGFzc3dvcmQgPSBpbml0KCkKICAgICAgICBfbG9vcCA9IG1haW4oKQogICAgICAgIGRlbCBfcGFzc3dvcmQK"
    },
    "signature": {
        "icon_high.gif": "0x67dfc79f89e2201199dab2575db959d3c9514b2b0fa22d3b1a029f80a168fce709b3e4d715413045753c35b7b570a60fb6b96341597a05105705735716325198c1a3872ecebd13488eee608b1e3a2377c43abe5b02159dfa3a68963ed79576b3dd44b2328adad7524b617fc4dc098c17a02b3a58d847977ede703f315c764c19f23545ae0",
        "icon.gif": "0x1238126861e31a3041605022a775e675309bc563d2ee3416c485516f73a7ffa02b329ed1cc145a4c626e6575b43a038dacfb2fe74af53d780371c7e9d2ffe4f91044937dd6a22247b63402587fbe5507c5a2c7e4253672e4ba72a4e441afb19a9fdbd339471f4f95e33d749e8e35f75561188497a24e2ce8319a5433b4a08fe4ef9d913f2e",
        "EN.txt": "0x5aee39a14f6cda51d48f13b356e8b437d747a8e14794d976edc0b454fd6ff232e0e79c312ac8bf877dc0d4169496d2744bc422930d127e5b1e92df5d1fef00216b55801ebe7932232a50d199024c8fae5fc4a93fb0ff4942c65cf99703e845b1c819cd604b1a0a206bd0fcaa3889871ba4316c6c9887b623b19540c9e0c7636544c88f6ea",
        "main.py": "0x30a74b014e8fe8fb3df65547dcc6e983835ad97ade224ed4f96a02a11a8944f69db12a4741f49d703383a5a593849bab13c1b3785bbef57d4cc6489a5231ad0ab73bf3c7876106ef5dbdb8d27da44ce3ea9d0f8c00fd75db9c5a0910ab5da1a2c338b6fc2fe15a2ccf934dd5fcaa4760522d33ceed5f96fd98ea1282159b458b1783b86e4"
    }
}
